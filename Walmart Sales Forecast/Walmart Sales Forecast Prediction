{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyPvtZ2Ua7jHrYl+E3bwUR3e"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f9c1lPzIHYki","executionInfo":{"status":"ok","timestamp":1737524616278,"user_tz":-480,"elapsed":8828,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"46fef265-5bf7-4330-eec9-731b46b7005a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import matplotlib.ticker as mticker\n","\n","import xgboost as xgb\n","from sklearn.metrics import mean_squared_error, r2_score\n","from sklearn.model_selection import train_test_split\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["# Data Understanding"],"metadata":{"id":"px7M5dzSKNsE"}},{"cell_type":"code","source":["df_feature = pd.read_csv(\"/content/drive/MyDrive/Master Degree/Self Project  Practice/Forecasting/Walmart Sales Forecast Prediction/Dataset/features.csv\")\n","df_stores = pd.read_csv(\"/content/drive/MyDrive/Master Degree/Self Project  Practice/Forecasting/Walmart Sales Forecast Prediction/Dataset/stores.csv\")\n","df_test = pd.read_csv(\"/content/drive/MyDrive/Master Degree/Self Project  Practice/Forecasting/Walmart Sales Forecast Prediction/Dataset/test.csv\")\n","df_train = pd.read_csv(\"/content/drive/MyDrive/Master Degree/Self Project  Practice/Forecasting/Walmart Sales Forecast Prediction/Dataset/train.csv\")"],"metadata":{"id":"f3hysWp3KNbE","executionInfo":{"status":"ok","timestamp":1737524619564,"user_tz":-480,"elapsed":3287,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["df_feature.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"_cpsOwXxKmbc","executionInfo":{"status":"ok","timestamp":1737524619565,"user_tz":-480,"elapsed":33,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"51c3300f-fcff-47b0-e6ce-0819f53a85a0"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Store  Temperature   Fuel_Price      MarkDown1      MarkDown2  \\\n","count  8190.000000  8190.000000  8190.000000    4032.000000    2921.000000   \n","mean     23.000000    59.356198     3.405992    7032.371786    3384.176594   \n","std      12.987966    18.678607     0.431337    9262.747448    8793.583016   \n","min       1.000000    -7.290000     2.472000   -2781.450000    -265.760000   \n","25%      12.000000    45.902500     3.041000    1577.532500      68.880000   \n","50%      23.000000    60.710000     3.513000    4743.580000     364.570000   \n","75%      34.000000    73.880000     3.743000    8923.310000    2153.350000   \n","max      45.000000   101.950000     4.468000  103184.980000  104519.540000   \n","\n","           MarkDown3     MarkDown4      MarkDown5          CPI  Unemployment  \n","count    3613.000000   3464.000000    4050.000000  7605.000000   7605.000000  \n","mean     1760.100180   3292.935886    4132.216422   172.460809      7.826821  \n","std     11276.462208   6792.329861   13086.690278    39.738346      1.877259  \n","min      -179.260000      0.220000    -185.170000   126.064000      3.684000  \n","25%         6.600000    304.687500    1440.827500   132.364839      6.634000  \n","50%        36.260000   1176.425000    2727.135000   182.764003      7.806000  \n","75%       163.150000   3310.007500    4832.555000   213.932412      8.567000  \n","max    149483.310000  67474.850000  771448.100000   228.976456     14.313000  "],"text/html":["\n","  <div id=\"df-d82ac8ba-f205-4d75-87f6-6267afe7618b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Store</th>\n","      <th>Temperature</th>\n","      <th>Fuel_Price</th>\n","      <th>MarkDown1</th>\n","      <th>MarkDown2</th>\n","      <th>MarkDown3</th>\n","      <th>MarkDown4</th>\n","      <th>MarkDown5</th>\n","      <th>CPI</th>\n","      <th>Unemployment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>8190.000000</td>\n","      <td>8190.000000</td>\n","      <td>8190.000000</td>\n","      <td>4032.000000</td>\n","      <td>2921.000000</td>\n","      <td>3613.000000</td>\n","      <td>3464.000000</td>\n","      <td>4050.000000</td>\n","      <td>7605.000000</td>\n","      <td>7605.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>23.000000</td>\n","      <td>59.356198</td>\n","      <td>3.405992</td>\n","      <td>7032.371786</td>\n","      <td>3384.176594</td>\n","      <td>1760.100180</td>\n","      <td>3292.935886</td>\n","      <td>4132.216422</td>\n","      <td>172.460809</td>\n","      <td>7.826821</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>12.987966</td>\n","      <td>18.678607</td>\n","      <td>0.431337</td>\n","      <td>9262.747448</td>\n","      <td>8793.583016</td>\n","      <td>11276.462208</td>\n","      <td>6792.329861</td>\n","      <td>13086.690278</td>\n","      <td>39.738346</td>\n","      <td>1.877259</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>-7.290000</td>\n","      <td>2.472000</td>\n","      <td>-2781.450000</td>\n","      <td>-265.760000</td>\n","      <td>-179.260000</td>\n","      <td>0.220000</td>\n","      <td>-185.170000</td>\n","      <td>126.064000</td>\n","      <td>3.684000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>12.000000</td>\n","      <td>45.902500</td>\n","      <td>3.041000</td>\n","      <td>1577.532500</td>\n","      <td>68.880000</td>\n","      <td>6.600000</td>\n","      <td>304.687500</td>\n","      <td>1440.827500</td>\n","      <td>132.364839</td>\n","      <td>6.634000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>23.000000</td>\n","      <td>60.710000</td>\n","      <td>3.513000</td>\n","      <td>4743.580000</td>\n","      <td>364.570000</td>\n","      <td>36.260000</td>\n","      <td>1176.425000</td>\n","      <td>2727.135000</td>\n","      <td>182.764003</td>\n","      <td>7.806000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>34.000000</td>\n","      <td>73.880000</td>\n","      <td>3.743000</td>\n","      <td>8923.310000</td>\n","      <td>2153.350000</td>\n","      <td>163.150000</td>\n","      <td>3310.007500</td>\n","      <td>4832.555000</td>\n","      <td>213.932412</td>\n","      <td>8.567000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>45.000000</td>\n","      <td>101.950000</td>\n","      <td>4.468000</td>\n","      <td>103184.980000</td>\n","      <td>104519.540000</td>\n","      <td>149483.310000</td>\n","      <td>67474.850000</td>\n","      <td>771448.100000</td>\n","      <td>228.976456</td>\n","      <td>14.313000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d82ac8ba-f205-4d75-87f6-6267afe7618b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d82ac8ba-f205-4d75-87f6-6267afe7618b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d82ac8ba-f205-4d75-87f6-6267afe7618b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a7734f42-37f4-4871-9462-c50146eb9cde\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a7734f42-37f4-4871-9462-c50146eb9cde')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a7734f42-37f4-4871-9462-c50146eb9cde button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df_feature\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Store\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2888.0082769948735,\n        \"min\": 1.0,\n        \"max\": 8190.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          8190.0,\n          23.0,\n          34.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2877.9559668001384,\n        \"min\": -7.29,\n        \"max\": 8190.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          59.356197802197805,\n          60.71,\n          8190.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2894.538101722043,\n        \"min\": 0.43133657110071605,\n        \"max\": 8190.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.405991819291819,\n          3.513,\n          8190.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MarkDown1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35050.67644276065,\n        \"min\": -2781.45,\n        \"max\": 103184.98,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7032.371785714286,\n          4743.58,\n          4032.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MarkDown2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36189.66134641883,\n        \"min\": -265.76,\n        \"max\": 104519.54,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3384.1765936323177,\n          364.57,\n          2921.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MarkDown3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52150.19913197659,\n        \"min\": -179.26,\n        \"max\": 149483.31,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1760.1001799058954,\n          36.26,\n          3613.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MarkDown4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23033.299665994236,\n        \"min\": 0.22,\n        \"max\": 67474.85,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3292.9358862586605,\n          1176.425,\n          3464.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MarkDown5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 271257.13866572076,\n        \"min\": -185.17,\n        \"max\": 771448.1,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4132.216422222222,\n          2727.135,\n          4050.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CPI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2634.070175615823,\n        \"min\": 39.73834609860846,\n        \"max\": 7605.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          172.46080918276135,\n          182.7640032,\n          7605.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unemployment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2686.2148961759826,\n        \"min\": 1.87725859391744,\n        \"max\": 7605.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.8268210387902695,\n          7.806,\n          7605.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df_feature.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8qn9H-8LK0mT","executionInfo":{"status":"ok","timestamp":1737524619565,"user_tz":-480,"elapsed":31,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"e403a1e3-25b4-4954-d87b-6d9e60765d12"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(8190, 12)"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df_feature.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"MaLAZ3EMK7XD","executionInfo":{"status":"ok","timestamp":1737524619566,"user_tz":-480,"elapsed":30,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"d4dadc25-4ddb-44bf-8bba-bd693f801cf4"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Store        Date  Temperature  Fuel_Price  MarkDown1  MarkDown2  \\\n","0      1  2010-02-05        42.31       2.572        NaN        NaN   \n","1      1  2010-02-12        38.51       2.548        NaN        NaN   \n","2      1  2010-02-19        39.93       2.514        NaN        NaN   \n","3      1  2010-02-26        46.63       2.561        NaN        NaN   \n","4      1  2010-03-05        46.50       2.625        NaN        NaN   \n","\n","   MarkDown3  MarkDown4  MarkDown5         CPI  Unemployment  IsHoliday  \n","0        NaN        NaN        NaN  211.096358         8.106      False  \n","1        NaN        NaN        NaN  211.242170         8.106       True  \n","2        NaN        NaN        NaN  211.289143         8.106      False  \n","3        NaN        NaN        NaN  211.319643         8.106      False  \n","4        NaN        NaN        NaN  211.350143         8.106      False  "],"text/html":["\n","  <div id=\"df-1a07ddd9-5c61-4410-b40c-0c809c6c456f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Store</th>\n","      <th>Date</th>\n","      <th>Temperature</th>\n","      <th>Fuel_Price</th>\n","      <th>MarkDown1</th>\n","      <th>MarkDown2</th>\n","      <th>MarkDown3</th>\n","      <th>MarkDown4</th>\n","      <th>MarkDown5</th>\n","      <th>CPI</th>\n","      <th>Unemployment</th>\n","      <th>IsHoliday</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>2010-02-05</td>\n","      <td>42.31</td>\n","      <td>2.572</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>211.096358</td>\n","      <td>8.106</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2010-02-12</td>\n","      <td>38.51</td>\n","      <td>2.548</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>211.242170</td>\n","      <td>8.106</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>2010-02-19</td>\n","      <td>39.93</td>\n","      <td>2.514</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>211.289143</td>\n","      <td>8.106</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>2010-02-26</td>\n","      <td>46.63</td>\n","      <td>2.561</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>211.319643</td>\n","      <td>8.106</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>2010-03-05</td>\n","      <td>46.50</td>\n","      <td>2.625</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>211.350143</td>\n","      <td>8.106</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a07ddd9-5c61-4410-b40c-0c809c6c456f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1a07ddd9-5c61-4410-b40c-0c809c6c456f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1a07ddd9-5c61-4410-b40c-0c809c6c456f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6276108e-6d22-458c-a8e1-e17eb9d70002\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6276108e-6d22-458c-a8e1-e17eb9d70002')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6276108e-6d22-458c-a8e1-e17eb9d70002 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_feature","summary":"{\n  \"name\": \"df_feature\",\n  \"rows\": 8190,\n  \"fields\": [\n    {\n      \"column\": \"Store\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 1,\n        \"max\": 45,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          40,\n          26,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 182,\n        \"samples\": [\n          \"2010-06-18\",\n          \"2010-11-26\",\n          \"2013-01-18\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.678606848907176,\n        \"min\": -7.29,\n        \"max\": 101.95,\n        \"num_unique_values\": 4178,\n        \"samples\": [\n          83.8,\n          31.48,\n          79.14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.43133657110071605,\n        \"min\": 2.472,\n        \"max\": 4.468,\n        \"num_unique_values\": 1011,\n        \"samples\": [\n          2.782,\n          2.936,\n          3.282\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MarkDown1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9262.74744752369,\n        \"min\": -2781.45,\n        \"max\": 103184.98,\n        \"num_unique_values\": 4023,\n        \"samples\": [\n          9273.46,\n          7024.93,\n          8569.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MarkDown2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8793.58301550763,\n        \"min\": -265.76,\n        \"max\": 104519.54,\n        \"num_unique_values\": 2715,\n        \"samples\": [\n          252.8,\n          2675.46,\n          2347.13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MarkDown3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11276.462208022962,\n        \"min\": -179.26,\n        \"max\": 149483.31,\n        \"num_unique_values\": 2885,\n        \"samples\": [\n          7.35,\n          182.74,\n          163.27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MarkDown4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6792.329861347639,\n        \"min\": 0.22,\n        \"max\": 67474.85,\n        \"num_unique_values\": 3405,\n        \"samples\": [\n          113.37,\n          1270.8,\n          24079.57\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MarkDown5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13086.690278200185,\n        \"min\": -185.17,\n        \"max\": 771448.1,\n        \"num_unique_values\": 4045,\n        \"samples\": [\n          3666.08,\n          3479.8,\n          4958.33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CPI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39.73834609860846,\n        \"min\": 126.064,\n        \"max\": 228.9764563,\n        \"num_unique_values\": 2505,\n        \"samples\": [\n          139.1226129,\n          216.0282356,\n          210.0451024\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Unemployment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.87725859391744,\n        \"min\": 3.684,\n        \"max\": 14.313,\n        \"num_unique_values\": 404,\n        \"samples\": [\n          7.259,\n          5.213,\n          6.901\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IsHoliday\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"zWkIT_uvLFIC","executionInfo":{"status":"ok","timestamp":1737524619566,"user_tz":-480,"elapsed":29,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"f1c06d04-c444-4a40-b2d9-485308714d60"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Store  Dept        Date  Weekly_Sales  IsHoliday\n","0      1     1  2010-02-05      24924.50      False\n","1      1     1  2010-02-12      46039.49       True\n","2      1     1  2010-02-19      41595.55      False\n","3      1     1  2010-02-26      19403.54      False\n","4      1     1  2010-03-05      21827.90      False"],"text/html":["\n","  <div id=\"df-d59ec24c-898b-4db2-8176-8b74d1f094ca\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Store</th>\n","      <th>Dept</th>\n","      <th>Date</th>\n","      <th>Weekly_Sales</th>\n","      <th>IsHoliday</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-05</td>\n","      <td>24924.50</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-12</td>\n","      <td>46039.49</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-19</td>\n","      <td>41595.55</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-26</td>\n","      <td>19403.54</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-03-05</td>\n","      <td>21827.90</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d59ec24c-898b-4db2-8176-8b74d1f094ca')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d59ec24c-898b-4db2-8176-8b74d1f094ca button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d59ec24c-898b-4db2-8176-8b74d1f094ca');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e5185034-ecad-486b-a328-3f7860eafb6b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e5185034-ecad-486b-a328-3f7860eafb6b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e5185034-ecad-486b-a328-3f7860eafb6b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_train"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eYWW4m1lLbVT","executionInfo":{"status":"ok","timestamp":1737524619566,"user_tz":-480,"elapsed":28,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"f34acc5d-276f-46d2-8791-547b2d3b1bc7"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(421570, 5)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["df_train['Dept'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wlNiHT4WL-fA","executionInfo":{"status":"ok","timestamp":1737524619566,"user_tz":-480,"elapsed":25,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"b3fde260-a5f6-4d03-8424-f7b9020d03b3"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 16, 17, 18,\n","       19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n","       36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56,\n","       58, 59, 60, 67, 71, 72, 74, 77, 78, 79, 80, 81, 82, 83, 85, 87, 90,\n","       91, 92, 93, 94, 95, 96, 97, 98, 99, 39, 50, 43, 65])"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["df_stores.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"O2RCVMJnLLBz","executionInfo":{"status":"ok","timestamp":1737524619566,"user_tz":-480,"elapsed":23,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"4e8d87b6-02a0-42ad-f5c4-1caad0a76fe2"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Store Type    Size\n","0      1    A  151315\n","1      2    A  202307\n","2      3    B   37392\n","3      4    A  205863\n","4      5    B   34875"],"text/html":["\n","  <div id=\"df-8c875d8f-c111-489a-ae54-8ab18089d1aa\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Store</th>\n","      <th>Type</th>\n","      <th>Size</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>A</td>\n","      <td>151315</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>A</td>\n","      <td>202307</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>B</td>\n","      <td>37392</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>A</td>\n","      <td>205863</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>B</td>\n","      <td>34875</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c875d8f-c111-489a-ae54-8ab18089d1aa')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8c875d8f-c111-489a-ae54-8ab18089d1aa button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8c875d8f-c111-489a-ae54-8ab18089d1aa');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-eb582f8a-a39c-4ebf-a646-fe5c46dab8ac\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eb582f8a-a39c-4ebf-a646-fe5c46dab8ac')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-eb582f8a-a39c-4ebf-a646-fe5c46dab8ac button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_stores","summary":"{\n  \"name\": \"df_stores\",\n  \"rows\": 45,\n  \"fields\": [\n    {\n      \"column\": \"Store\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 1,\n        \"max\": 45,\n        \"num_unique_values\": 45,\n        \"samples\": [\n          40,\n          26,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"A\",\n          \"B\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 63825,\n        \"min\": 34875,\n        \"max\": 219622,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          203742,\n          93188,\n          57197\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df_stores.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sBrcDxUrLRe7","executionInfo":{"status":"ok","timestamp":1737524619566,"user_tz":-480,"elapsed":22,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"16dabc72-ff0d-4ab6-e569-e460b1ca0cf9"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(45, 3)"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["# Data cleaning\n","- Check missing value\n","- Merge the feature and store"],"metadata":{"id":"bms91GfMLr_K"}},{"cell_type":"code","source":["# Check missing value of features\n","df_feature.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":460},"id":"ZNuBmeA8Lrfi","executionInfo":{"status":"ok","timestamp":1737524619566,"user_tz":-480,"elapsed":20,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"30108130-5422-45cb-95b9-ec84281af768"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Store              0\n","Date               0\n","Temperature        0\n","Fuel_Price         0\n","MarkDown1       4158\n","MarkDown2       5269\n","MarkDown3       4577\n","MarkDown4       4726\n","MarkDown5       4140\n","CPI              585\n","Unemployment     585\n","IsHoliday          0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Store</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Temperature</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Fuel_Price</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>MarkDown1</th>\n","      <td>4158</td>\n","    </tr>\n","    <tr>\n","      <th>MarkDown2</th>\n","      <td>5269</td>\n","    </tr>\n","    <tr>\n","      <th>MarkDown3</th>\n","      <td>4577</td>\n","    </tr>\n","    <tr>\n","      <th>MarkDown4</th>\n","      <td>4726</td>\n","    </tr>\n","    <tr>\n","      <th>MarkDown5</th>\n","      <td>4140</td>\n","    </tr>\n","    <tr>\n","      <th>CPI</th>\n","      <td>585</td>\n","    </tr>\n","    <tr>\n","      <th>Unemployment</th>\n","      <td>585</td>\n","    </tr>\n","    <tr>\n","      <th>IsHoliday</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# Drop MarkDown as they have high number of NA\n","df_feature = df_feature.drop(['MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4', 'MarkDown5'], axis=1)"],"metadata":{"id":"rkVo6UXfQQEJ","executionInfo":{"status":"ok","timestamp":1737524619566,"user_tz":-480,"elapsed":19,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Replace the NA of CPI and Unemployment with median\n","df_feature['CPI'].fillna(df_feature['CPI'].median(),inplace= True)\n","df_feature['Unemployment'].fillna(df_feature['Unemployment'].median(), inplace= True)"],"metadata":{"id":"fIGxa2nCVq8h","executionInfo":{"status":"ok","timestamp":1737524619567,"user_tz":-480,"elapsed":20,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d4359303-8be5-4161-b904-d4546138db58"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-14-c71f42dc2fd4>:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df_feature['CPI'].fillna(df_feature['CPI'].median(),inplace= True)\n","<ipython-input-14-c71f42dc2fd4>:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df_feature['Unemployment'].fillna(df_feature['Unemployment'].median(), inplace= True)\n"]}]},{"cell_type":"code","source":["# Merge Dataset\n","df = df_feature.merge(df_stores, on='Store', how='left')"],"metadata":{"id":"cdKWa0mzWSYf","executionInfo":{"status":"ok","timestamp":1737524619567,"user_tz":-480,"elapsed":18,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["df_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"RCSThcueWt24","executionInfo":{"status":"ok","timestamp":1737524619567,"user_tz":-480,"elapsed":18,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"3d415c84-c63c-43d5-b8cf-ce97d69e8551"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Store  Dept        Date  Weekly_Sales  IsHoliday\n","0      1     1  2010-02-05      24924.50      False\n","1      1     1  2010-02-12      46039.49       True\n","2      1     1  2010-02-19      41595.55      False\n","3      1     1  2010-02-26      19403.54      False\n","4      1     1  2010-03-05      21827.90      False"],"text/html":["\n","  <div id=\"df-176f8dfe-c812-41a9-a653-63a889a10ac0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Store</th>\n","      <th>Dept</th>\n","      <th>Date</th>\n","      <th>Weekly_Sales</th>\n","      <th>IsHoliday</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-05</td>\n","      <td>24924.50</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-12</td>\n","      <td>46039.49</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-19</td>\n","      <td>41595.55</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-26</td>\n","      <td>19403.54</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-03-05</td>\n","      <td>21827.90</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-176f8dfe-c812-41a9-a653-63a889a10ac0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-176f8dfe-c812-41a9-a653-63a889a10ac0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-176f8dfe-c812-41a9-a653-63a889a10ac0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4883707f-65fa-49a2-a858-80d16dbbbd8f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4883707f-65fa-49a2-a858-80d16dbbbd8f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4883707f-65fa-49a2-a858-80d16dbbbd8f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_train"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["df1 = df_train.merge(df, on=['Store','Date', 'IsHoliday'], how='left')"],"metadata":{"id":"MHIB_mHYWpl4","executionInfo":{"status":"ok","timestamp":1737524619896,"user_tz":-480,"elapsed":346,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["df1.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VehtCMVrXK_n","executionInfo":{"status":"ok","timestamp":1737524619896,"user_tz":-480,"elapsed":2,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"483e8f53-c924-44f3-ca48-93d11de5465d"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(421570, 11)"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["df1['IsHoliday'] = df1['IsHoliday'].apply(lambda x: 1 if x == True else 0)\n","df1['Type'] = df1['Type'].apply(lambda x: 1 if x == 'A' else (2 if x == 'B' else 3))"],"metadata":{"id":"qwtGPuxNdc1-","executionInfo":{"status":"ok","timestamp":1737524620295,"user_tz":-480,"elapsed":400,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["df1['Date'] = pd.to_datetime(df1['Date'])"],"metadata":{"id":"T3jF_OPfel9O","executionInfo":{"status":"ok","timestamp":1737524620295,"user_tz":-480,"elapsed":15,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["df1.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H0VfZx8ye9D2","executionInfo":{"status":"ok","timestamp":1737524620296,"user_tz":-480,"elapsed":15,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"ffc06127-3562-482e-8fb5-b72028d27fe4"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 421570 entries, 0 to 421569\n","Data columns (total 11 columns):\n"," #   Column        Non-Null Count   Dtype         \n","---  ------        --------------   -----         \n"," 0   Store         421570 non-null  int64         \n"," 1   Dept          421570 non-null  int64         \n"," 2   Date          421570 non-null  datetime64[ns]\n"," 3   Weekly_Sales  421570 non-null  float64       \n"," 4   IsHoliday     421570 non-null  int64         \n"," 5   Temperature   421570 non-null  float64       \n"," 6   Fuel_Price    421570 non-null  float64       \n"," 7   CPI           421570 non-null  float64       \n"," 8   Unemployment  421570 non-null  float64       \n"," 9   Type          421570 non-null  int64         \n"," 10  Size          421570 non-null  int64         \n","dtypes: datetime64[ns](1), float64(5), int64(5)\n","memory usage: 35.4 MB\n"]}]},{"cell_type":"code","source":["def create_features(df):\n","  df['Date'] = pd.to_datetime(df['Date'])\n","  df['year'] = df['Date'].dt.year\n","  df['month'] = df['Date'].dt.month\n","  df['day'] = df['Date'].dt.day\n","\n","  return df"],"metadata":{"id":"gjm-LB5D6Af4","executionInfo":{"status":"ok","timestamp":1737524620296,"user_tz":-480,"elapsed":12,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["create_features(df1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"vamEr5p16Mkm","executionInfo":{"status":"ok","timestamp":1737524620296,"user_tz":-480,"elapsed":12,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"949cdef4-c33d-4c32-886c-d6d98219761c"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Store  Dept       Date  Weekly_Sales  IsHoliday  Temperature  \\\n","0           1     1 2010-02-05      24924.50          0        42.31   \n","1           1     1 2010-02-12      46039.49          1        38.51   \n","2           1     1 2010-02-19      41595.55          0        39.93   \n","3           1     1 2010-02-26      19403.54          0        46.63   \n","4           1     1 2010-03-05      21827.90          0        46.50   \n","...       ...   ...        ...           ...        ...          ...   \n","421565     45    98 2012-09-28        508.37          0        64.88   \n","421566     45    98 2012-10-05        628.10          0        64.89   \n","421567     45    98 2012-10-12       1061.02          0        54.47   \n","421568     45    98 2012-10-19        760.01          0        56.47   \n","421569     45    98 2012-10-26       1076.80          0        58.85   \n","\n","        Fuel_Price         CPI  Unemployment  Type    Size  year  month  day  \n","0            2.572  211.096358         8.106     1  151315  2010      2    5  \n","1            2.548  211.242170         8.106     1  151315  2010      2   12  \n","2            2.514  211.289143         8.106     1  151315  2010      2   19  \n","3            2.561  211.319643         8.106     1  151315  2010      2   26  \n","4            2.625  211.350143         8.106     1  151315  2010      3    5  \n","...            ...         ...           ...   ...     ...   ...    ...  ...  \n","421565       3.997  192.013558         8.684     2  118221  2012      9   28  \n","421566       3.985  192.170412         8.667     2  118221  2012     10    5  \n","421567       4.000  192.327265         8.667     2  118221  2012     10   12  \n","421568       3.969  192.330854         8.667     2  118221  2012     10   19  \n","421569       3.882  192.308899         8.667     2  118221  2012     10   26  \n","\n","[421570 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-513b82f1-db9a-412e-b2f2-2f7321d6fd34\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Store</th>\n","      <th>Dept</th>\n","      <th>Date</th>\n","      <th>Weekly_Sales</th>\n","      <th>IsHoliday</th>\n","      <th>Temperature</th>\n","      <th>Fuel_Price</th>\n","      <th>CPI</th>\n","      <th>Unemployment</th>\n","      <th>Type</th>\n","      <th>Size</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>day</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-05</td>\n","      <td>24924.50</td>\n","      <td>0</td>\n","      <td>42.31</td>\n","      <td>2.572</td>\n","      <td>211.096358</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>2</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-12</td>\n","      <td>46039.49</td>\n","      <td>1</td>\n","      <td>38.51</td>\n","      <td>2.548</td>\n","      <td>211.242170</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>2</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-19</td>\n","      <td>41595.55</td>\n","      <td>0</td>\n","      <td>39.93</td>\n","      <td>2.514</td>\n","      <td>211.289143</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>2</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-26</td>\n","      <td>19403.54</td>\n","      <td>0</td>\n","      <td>46.63</td>\n","      <td>2.561</td>\n","      <td>211.319643</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>2</td>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-03-05</td>\n","      <td>21827.90</td>\n","      <td>0</td>\n","      <td>46.50</td>\n","      <td>2.625</td>\n","      <td>211.350143</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>3</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>421565</th>\n","      <td>45</td>\n","      <td>98</td>\n","      <td>2012-09-28</td>\n","      <td>508.37</td>\n","      <td>0</td>\n","      <td>64.88</td>\n","      <td>3.997</td>\n","      <td>192.013558</td>\n","      <td>8.684</td>\n","      <td>2</td>\n","      <td>118221</td>\n","      <td>2012</td>\n","      <td>9</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>421566</th>\n","      <td>45</td>\n","      <td>98</td>\n","      <td>2012-10-05</td>\n","      <td>628.10</td>\n","      <td>0</td>\n","      <td>64.89</td>\n","      <td>3.985</td>\n","      <td>192.170412</td>\n","      <td>8.667</td>\n","      <td>2</td>\n","      <td>118221</td>\n","      <td>2012</td>\n","      <td>10</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>421567</th>\n","      <td>45</td>\n","      <td>98</td>\n","      <td>2012-10-12</td>\n","      <td>1061.02</td>\n","      <td>0</td>\n","      <td>54.47</td>\n","      <td>4.000</td>\n","      <td>192.327265</td>\n","      <td>8.667</td>\n","      <td>2</td>\n","      <td>118221</td>\n","      <td>2012</td>\n","      <td>10</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>421568</th>\n","      <td>45</td>\n","      <td>98</td>\n","      <td>2012-10-19</td>\n","      <td>760.01</td>\n","      <td>0</td>\n","      <td>56.47</td>\n","      <td>3.969</td>\n","      <td>192.330854</td>\n","      <td>8.667</td>\n","      <td>2</td>\n","      <td>118221</td>\n","      <td>2012</td>\n","      <td>10</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>421569</th>\n","      <td>45</td>\n","      <td>98</td>\n","      <td>2012-10-26</td>\n","      <td>1076.80</td>\n","      <td>0</td>\n","      <td>58.85</td>\n","      <td>3.882</td>\n","      <td>192.308899</td>\n","      <td>8.667</td>\n","      <td>2</td>\n","      <td>118221</td>\n","      <td>2012</td>\n","      <td>10</td>\n","      <td>26</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>421570 rows × 14 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-513b82f1-db9a-412e-b2f2-2f7321d6fd34')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-513b82f1-db9a-412e-b2f2-2f7321d6fd34 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-513b82f1-db9a-412e-b2f2-2f7321d6fd34');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f7510156-c73a-4b53-bd55-d58cd84af2b1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f7510156-c73a-4b53-bd55-d58cd84af2b1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f7510156-c73a-4b53-bd55-d58cd84af2b1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_5b2c9139-1cc0-4e57-9ba2-6763ebd5425e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5b2c9139-1cc0-4e57-9ba2-6763ebd5425e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df1"}},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["# Visualization"],"metadata":{"id":"V7hllohTdSWm"}},{"cell_type":"code","source":["df1.head(20)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":676},"id":"b3syAoVFiQdf","executionInfo":{"status":"ok","timestamp":1737524620296,"user_tz":-480,"elapsed":10,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"122b731e-971a-4581-c621-803a0032ec7b"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Store  Dept       Date  Weekly_Sales  IsHoliday  Temperature  Fuel_Price  \\\n","0       1     1 2010-02-05      24924.50          0        42.31       2.572   \n","1       1     1 2010-02-12      46039.49          1        38.51       2.548   \n","2       1     1 2010-02-19      41595.55          0        39.93       2.514   \n","3       1     1 2010-02-26      19403.54          0        46.63       2.561   \n","4       1     1 2010-03-05      21827.90          0        46.50       2.625   \n","5       1     1 2010-03-12      21043.39          0        57.79       2.667   \n","6       1     1 2010-03-19      22136.64          0        54.58       2.720   \n","7       1     1 2010-03-26      26229.21          0        51.45       2.732   \n","8       1     1 2010-04-02      57258.43          0        62.27       2.719   \n","9       1     1 2010-04-09      42960.91          0        65.86       2.770   \n","10      1     1 2010-04-16      17596.96          0        66.32       2.808   \n","11      1     1 2010-04-23      16145.35          0        64.84       2.795   \n","12      1     1 2010-04-30      16555.11          0        67.41       2.780   \n","13      1     1 2010-05-07      17413.94          0        72.55       2.835   \n","14      1     1 2010-05-14      18926.74          0        74.78       2.854   \n","15      1     1 2010-05-21      14773.04          0        76.44       2.826   \n","16      1     1 2010-05-28      15580.43          0        80.44       2.759   \n","17      1     1 2010-06-04      17558.09          0        80.69       2.705   \n","18      1     1 2010-06-11      16637.62          0        80.43       2.668   \n","19      1     1 2010-06-18      16216.27          0        84.11       2.637   \n","\n","           CPI  Unemployment  Type    Size  year  month  day  \n","0   211.096358         8.106     1  151315  2010      2    5  \n","1   211.242170         8.106     1  151315  2010      2   12  \n","2   211.289143         8.106     1  151315  2010      2   19  \n","3   211.319643         8.106     1  151315  2010      2   26  \n","4   211.350143         8.106     1  151315  2010      3    5  \n","5   211.380643         8.106     1  151315  2010      3   12  \n","6   211.215635         8.106     1  151315  2010      3   19  \n","7   211.018042         8.106     1  151315  2010      3   26  \n","8   210.820450         7.808     1  151315  2010      4    2  \n","9   210.622857         7.808     1  151315  2010      4    9  \n","10  210.488700         7.808     1  151315  2010      4   16  \n","11  210.439123         7.808     1  151315  2010      4   23  \n","12  210.389546         7.808     1  151315  2010      4   30  \n","13  210.339968         7.808     1  151315  2010      5    7  \n","14  210.337426         7.808     1  151315  2010      5   14  \n","15  210.617093         7.808     1  151315  2010      5   21  \n","16  210.896761         7.808     1  151315  2010      5   28  \n","17  211.176428         7.808     1  151315  2010      6    4  \n","18  211.456095         7.808     1  151315  2010      6   11  \n","19  211.453772         7.808     1  151315  2010      6   18  "],"text/html":["\n","  <div id=\"df-5b86c511-8acb-4e23-bc31-5899e6e26c6d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Store</th>\n","      <th>Dept</th>\n","      <th>Date</th>\n","      <th>Weekly_Sales</th>\n","      <th>IsHoliday</th>\n","      <th>Temperature</th>\n","      <th>Fuel_Price</th>\n","      <th>CPI</th>\n","      <th>Unemployment</th>\n","      <th>Type</th>\n","      <th>Size</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>day</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-05</td>\n","      <td>24924.50</td>\n","      <td>0</td>\n","      <td>42.31</td>\n","      <td>2.572</td>\n","      <td>211.096358</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>2</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-12</td>\n","      <td>46039.49</td>\n","      <td>1</td>\n","      <td>38.51</td>\n","      <td>2.548</td>\n","      <td>211.242170</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>2</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-19</td>\n","      <td>41595.55</td>\n","      <td>0</td>\n","      <td>39.93</td>\n","      <td>2.514</td>\n","      <td>211.289143</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>2</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-26</td>\n","      <td>19403.54</td>\n","      <td>0</td>\n","      <td>46.63</td>\n","      <td>2.561</td>\n","      <td>211.319643</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>2</td>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-03-05</td>\n","      <td>21827.90</td>\n","      <td>0</td>\n","      <td>46.50</td>\n","      <td>2.625</td>\n","      <td>211.350143</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>3</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-03-12</td>\n","      <td>21043.39</td>\n","      <td>0</td>\n","      <td>57.79</td>\n","      <td>2.667</td>\n","      <td>211.380643</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>3</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-03-19</td>\n","      <td>22136.64</td>\n","      <td>0</td>\n","      <td>54.58</td>\n","      <td>2.720</td>\n","      <td>211.215635</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>3</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-03-26</td>\n","      <td>26229.21</td>\n","      <td>0</td>\n","      <td>51.45</td>\n","      <td>2.732</td>\n","      <td>211.018042</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>3</td>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-04-02</td>\n","      <td>57258.43</td>\n","      <td>0</td>\n","      <td>62.27</td>\n","      <td>2.719</td>\n","      <td>210.820450</td>\n","      <td>7.808</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-04-09</td>\n","      <td>42960.91</td>\n","      <td>0</td>\n","      <td>65.86</td>\n","      <td>2.770</td>\n","      <td>210.622857</td>\n","      <td>7.808</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-04-16</td>\n","      <td>17596.96</td>\n","      <td>0</td>\n","      <td>66.32</td>\n","      <td>2.808</td>\n","      <td>210.488700</td>\n","      <td>7.808</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-04-23</td>\n","      <td>16145.35</td>\n","      <td>0</td>\n","      <td>64.84</td>\n","      <td>2.795</td>\n","      <td>210.439123</td>\n","      <td>7.808</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-04-30</td>\n","      <td>16555.11</td>\n","      <td>0</td>\n","      <td>67.41</td>\n","      <td>2.780</td>\n","      <td>210.389546</td>\n","      <td>7.808</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>4</td>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-05-07</td>\n","      <td>17413.94</td>\n","      <td>0</td>\n","      <td>72.55</td>\n","      <td>2.835</td>\n","      <td>210.339968</td>\n","      <td>7.808</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>5</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-05-14</td>\n","      <td>18926.74</td>\n","      <td>0</td>\n","      <td>74.78</td>\n","      <td>2.854</td>\n","      <td>210.337426</td>\n","      <td>7.808</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>5</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-05-21</td>\n","      <td>14773.04</td>\n","      <td>0</td>\n","      <td>76.44</td>\n","      <td>2.826</td>\n","      <td>210.617093</td>\n","      <td>7.808</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>5</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-05-28</td>\n","      <td>15580.43</td>\n","      <td>0</td>\n","      <td>80.44</td>\n","      <td>2.759</td>\n","      <td>210.896761</td>\n","      <td>7.808</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>5</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-06-04</td>\n","      <td>17558.09</td>\n","      <td>0</td>\n","      <td>80.69</td>\n","      <td>2.705</td>\n","      <td>211.176428</td>\n","      <td>7.808</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>6</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-06-11</td>\n","      <td>16637.62</td>\n","      <td>0</td>\n","      <td>80.43</td>\n","      <td>2.668</td>\n","      <td>211.456095</td>\n","      <td>7.808</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>6</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-06-18</td>\n","      <td>16216.27</td>\n","      <td>0</td>\n","      <td>84.11</td>\n","      <td>2.637</td>\n","      <td>211.453772</td>\n","      <td>7.808</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>6</td>\n","      <td>18</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b86c511-8acb-4e23-bc31-5899e6e26c6d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5b86c511-8acb-4e23-bc31-5899e6e26c6d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5b86c511-8acb-4e23-bc31-5899e6e26c6d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fb400022-7cce-4140-a353-c88bd3f5c4f0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fb400022-7cce-4140-a353-c88bd3f5c4f0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fb400022-7cce-4140-a353-c88bd3f5c4f0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df1"}},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["fig, ax = plt.subplots(3,2, figsize=(20,15))\n","\n","df1_list = ['Weekly_Sales',\t'Temperature',\t'Fuel_Price',\t'CPI',\t'Unemployment']\n","\n","x = 0\n","y = 0\n","\n","for i in df1_list:\n","\n","  sns.lineplot(x='Date', y=i, data=df1, ax=ax[x,y])\n","  ax[x,y].set_title(f'Lineplot of {i}')\n","  ax[x,y].set_xlabel('Time')\n","  ax[x,y].set_ylabel(i)\n","\n","  # Rotate x-ticks and set date format\n","  ax[x, y].tick_params(axis='x', rotation=45)\n","  ax[x, y].xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%Y-%m'))\n","  ax[x, y].xaxis.set_major_locator(plt.matplotlib.dates.MonthLocator())\n","\n","  plt.tight_layout()\n","  y += 1\n","  if y == 2:\n","    y = 0\n","    x += 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":850},"id":"aqX6QkkodSFV","executionInfo":{"status":"ok","timestamp":1737524653249,"user_tz":-480,"elapsed":32961,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"1f89bb18-f20e-4ce3-bc81-925bba6b4e76"},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x1500 with 6 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["store_sales = df1.groupby('Store')['Weekly_Sales'].sum()\n","\n","df_store_sales = store_sales.sort_values(ascending=False)\n","\n","# Convert the sorted series to a DataFrame for easier plotting\n","df_store_sales = df_store_sales.reset_index()\n","\n","# Plot barplot\n","plt.figure(figsize=(12, 6))\n","sns.barplot(x='Store', y='Weekly_Sales', data=df_store_sales, order=df_store_sales['Store'])\n","\n","# Customize the y-tick format\n","def millions_formatter(x, pos):\n","    return f'{x / 1_000_000:.0f}M'\n","\n","plt.gca().get_yaxis().set_major_formatter(mticker.FuncFormatter(millions_formatter))\n","\n","plt.title('Total Sales by Store')\n","plt.xlabel('Store')\n","plt.ylabel('Total Sales')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"rIr9s9dR63KG","executionInfo":{"status":"ok","timestamp":1737524653249,"user_tz":-480,"elapsed":6,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"5b725b3f-f496-4c44-88af-d4f1e94b1219"},"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Train/test Split"],"metadata":{"id":"YN8u2rS_Gp5R"}},{"cell_type":"code","source":["df2 = df1.groupby('Date')['Weekly_Sales'].sum()\n","df2 = df2.reset_index()"],"metadata":{"id":"lhrLog99XZG_","executionInfo":{"status":"ok","timestamp":1737524654122,"user_tz":-480,"elapsed":878,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["number_date = len(df1['Date'].unique())\n","\n","# 0.8 as split\n","date = number_date *0.8\n","date = int(date)\n","df1.iloc[date]['Date']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LX5rWc3CCxFZ","executionInfo":{"status":"ok","timestamp":1737524654123,"user_tz":-480,"elapsed":14,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"e77fc05c-5520-48e8-d0f2-7acef8efc6d0"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Timestamp('2012-04-13 00:00:00')"]},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","source":["'2012-04-13' will be split of the train and test boarder"],"metadata":{"id":"PcCnQs9tHJmq"}},{"cell_type":"code","source":["train = df2.iloc[:date]\n","test = df2.iloc[date:]"],"metadata":{"id":"Av1Zf1IdHfLw","executionInfo":{"status":"ok","timestamp":1737524654123,"user_tz":-480,"elapsed":12,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["fig, ax = plt.subplots(figsize=(20,10))\n","\n","sns.lineplot(x='Date', y='Weekly_Sales', data=train, color ='Blue',ax=ax)\n","sns.lineplot(x='Date', y='Weekly_Sales', data=test, color ='Red', ax=ax)\n","axline = ax.axvline(x=df1.iloc[date]['Date'], color='black', linestyle='--')\n","\n","# Customize the y-tick format\n","def millions_formatter(x, pos):\n","    return f'{x / 1_000_000:.0f}M'\n","\n","plt.gca().get_yaxis().set_major_formatter(mticker.FuncFormatter(millions_formatter))\n","\n","plt.title('Total Sales')\n","plt.xlabel('Date')\n","plt.ylabel('Weekly Sales')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":601},"id":"O5oeB6WvHQFZ","executionInfo":{"status":"ok","timestamp":1737524654123,"user_tz":-480,"elapsed":12,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"21022776-72e1-46db-8262-5a1a75232cdb"},"execution_count":30,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x1000 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABlwAAANXCAYAAABQdfJFAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzs3XmYnXV5P/77zJpkQhIIIZtAAqIsYnEJfhGQBKjIIlYxVis2gIIVpAICFUVtrcWfYMEF0OIlAaxVAcUVF9AEZBe1VnBhDSCEAJHsyUySOb8/Hp85Z8IsZ53nzJzX67pyPU9mzpz5pMXkM8/7c993Lp/P5wMAAAAAAICKtWS9AAAAAAAAgNFO4AIAAAAAAFAlgQsAAAAAAECVBC4AAAAAAABVErgAAAAAAABUSeACAAAAAABQJYELAAAAAABAlQQuAAAAAAAAVRK4AAAAAAAAVEngAgAANKWlS5dGLpeLpUuXjvj3nj9/fsyfP3/Evy8AAFA/AhcAAGDE5HK5kn6VEoJccMEF8Z3vfKfua46I+N3vfhdvfetbY9ddd41x48bF7Nmz42//9m/jC1/4woh8fwAAoPG1Zb0AAACgeXz1q1/t9/trrrkmbrrpphd8fK+99hr2vS644IJ461vfGn/3d39XyyW+wB133BELFiyIXXbZJU4++eSYMWNGPPHEE3HXXXfF5z73uTj99NPr+v0BAIDRQeACAACMmOOPP77f7++666646aabXvDxRvIf//EfMXny5PjlL38ZU6ZM6fe5Z555JptFAQAADUdLMQAAoKGsX78+PvjBD8bOO+8cnZ2d8dKXvjQ+85nPRD6f73tNLpeL9evXx9VXX93XhuyEE06IiIjHHnssTj311HjpS18a48ePj6lTp8bChQtj2bJlFa3n4Ycfjn322ecFYUtExE477dTv94sXL45DDz00dtppp+js7Iy99947vvjFL5b0fbq7u+PjH/94vPjFL47Ozs7Yeeed49xzz43u7u5+r7vpppvioIMOiilTpsTEiRPjpS99aXz4wx+u6M8GAADUjgoXAACgYeTz+Tj22GNjyZIl8e53vzv222+/+MlPfhLnnHNOPPnkk3HJJZdERNKa7D3veU/sv//+ccopp0RExO677x4REb/85S/jjjvuiLe//e3xohe9KJYtWxZf/OIXY/78+fH73/8+JkyYUNaadt1117jzzjvjvvvui5e97GVDvvaLX/xi7LPPPnHsscdGW1tbfP/7349TTz01ent747TTThv063p7e+PYY4+N2267LU455ZTYa6+94ne/+11ccskl8cADD/TNqrn//vvjmGOOiZe//OXxiU98Ijo7O+Ohhx6K22+/vaw/EwAAUHu5fPExMQAAgBH0/ve/Py677LK+6pXvfve78Xd/93fxyU9+Mj7ykY/0vW7hwoXxrW99Kx588MG+YGXixInx1re+Na666qp+77lx48YYP358v4/dddddccABB8Q111wT73rXuyIiYunSpbFgwYJYsmRJzJ8/f9A13nTTTXHkkUdGRMT+++8fBx98cBx22GGxYMGCaG9vH/Z7v+ENb4gHH3wwHn744b6Ppd9v6dKlERHx3//937Fo0aK45ZZb4qCDDup73X/913/FP/3TP8Xtt98er33ta+Ozn/1snHnmmfHss8/GjjvuOOiaAQCAkaelGAAA0DBuvPHGaG1tjX/+53/u9/EPfvCDkc/n40c/+tGw71EceGzevDlWrlwZL37xi2PKlCnx61//uuw1/e3f/m3ceeedceyxx8Zvf/vbuPDCC+OII46I2bNnx/e+971Bv/fq1avjueeei0MOOSQeeeSRWL169aDf47rrrou99tor9txzz3juuef6fh166KEREbFkyZKIiL62Zt/97nejt7e37D8LAABQPwIXAACgYTz22GMxa9as2G677fp9fK+99ur7/HA2btwYH/vYx/pmwOy4444xbdq0WLVq1ZChx1DmzZsX3/72t+P555+Pe+65J84777xYu3ZtvPWtb43f//73fa+7/fbb4/DDD4+urq6YMmVKTJs2rW++ylDf+8EHH4z7778/pk2b1u/XS17ykoiIeOaZZyIi4u///u/jwAMPjPe85z0xffr0ePvb3x7XXnut8AUAABqAGS4AAMCYcvrpp8fixYvjjDPOiAMOOCAmT54cuVwu3v72t1cdTHR0dMS8efNi3rx58ZKXvCROPPHEuO666+LjH/94PPzww3HYYYfFnnvuGRdffHHsvPPO0dHRETfeeGNccsklQ37v3t7e2HfffePiiy8e8PM777xzRCQVNLfeemssWbIkfvjDH8aPf/zj+OY3vxmHHnpo/PSnP43W1taq/nwAAEDlBC4AAEDD2HXXXePmm2+OtWvX9qty+eMf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iIiIU045Jdrb2zNeEQACFwCACnV3F+63bhW4AAAwcnp6euL9739/RESccMIJAheABuCxAABAhdIKlwhtxQAAAKDZZRq4bN26NT760Y/G3LlzY/z48bH77rvHv//7v0c+n+97TT6fj4997GMxc+bMGD9+fBx++OHx4IMP9nufXC4XuVwu7rrrrn4f7+7ujqlTp0Yul4ulS5eOxB8JAGgixYHLli3ZrQMAAADIXqaBy6c//en44he/GJdeemn84Q9/iE9/+tNx4YUXxhe+8IW+11x44YXx+c9/Pr70pS/F3XffHV1dXXHEEUfEpuInHBGx8847x+LFi/t97IYbboiJEyeOyJ8FAGg+AhcAAAAglWngcscdd8Sb3vSmOProo2POnDnx1re+NV7/+tfHPffcExFJdctnP/vZOP/88+NNb3pTvPzlL49rrrkmnnrqqfjOd77T770WLVoU3/jGN2Ljxo19H7vyyitj0aJFQ66hu7s71qxZ0+8XAEAptBQDAAAAUpkGLq997WvjZz/7WTzwwAMREfHb3/42brvttjjyyCMjIuLRRx+Np59+Og4//PC+r5k8eXK85jWviTvvvLPfe73qVa+KOXPmxLe+9a2IiHj88cfj1ltvjXe9611DruFTn/pUTJ48ue/XzjvvXMs/IgAwhqlwAQAAAFKZBi4f+tCH4u1vf3vsueee0d7eHq94xSvijDPOiHe+850REfH0009HRMT06dP7fd306dP7PlfspJNOiiuvvDIiIq666qo46qijYtq0aUOu4bzzzovVq1f3/XriiSdq8UcDAJpAd3fhXuACAAAAza0ty29+7bXXxte+9rX4n//5n9hnn33if//3f+OMM86IWbNmDdsKbCDHH398fOhDH4pHHnkkrrrqqvj85z8/7Nd0dnZGZ2dnJcsHAJqcChcAALLS2dkZP/jBD/ruAchepoHLOeec01flEhGx7777xmOPPRaf+tSnYtGiRTFjxoyIiFixYkXMnDmz7+tWrFgR++233wveb+rUqXHMMcfEu9/97ti0aVMceeSRsXbt2hH5swAAzccMFwAAstLW1hZHH3101ssAoEimLcU2bNgQLS39l9Da2hq9vb0RETF37tyYMWNG/OxnP+v7/Jo1a+Luu++OAw44YMD3POmkk2Lp0qXxj//4j9Ha2lq/xQMATU+FCwAAAJDKtMLljW98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l20PYaR7gQiBCyNnxx13jB133DHrZQDwV5kGLtOmTYsZM2b0/frBD34Qu+++exxyyCGxevXq+MpXvhIXX3xxHHroofGqV70qFi9eHHfccUfcdddd/d5n0aJFsXjx4n4fW7x4cSxatGgk/zgAwBimpRgAEFHYE2xb4SJwYaR1dXXFs88+G88++2x0dXVlvRwAooFmuPT09MR///d/x0knnRS5XC5+9atfxebNm+Pwww/ve82ee+4Zu+yyS9x55539vvbYY4+N559/Pm677baIiLjtttvi+eefjze+8Y3Dft/u7u5Ys2ZNv18AANsqNXBR4QIAY9tgLcVyucJ+QOACAM2pYQKX73znO7Fq1ao44YQTIiLi6aefjo6OjpgyZUq/102fPj2efvrpfh9rb2+P448/Pq688sqIiLjyyivj+OOPj/biBqqD+NSnPhWTJ0/u+7XzzjvX5M8DAIwtZrgAABGDBy4RhTku9gMA0JwaJnD5yle+EkceeWTMmjWroq8/6aST4rrrrounn346rrvuujjppJNK+rrzzjsvVq9e3ffriSeeqOj7AwBjmwoXACCitMBFhQsjYePGjTF//vyYP39+bEz/wwQgU23Dv6T+Hnvssbj55pvj29/+dt/HZsyYET09PbFq1ap+VS4rVqyIGTNmvOA99t1339hzzz3jHe94R+y1117xspe9LP73f/932O/d2dkZnYNNvwUA+CszXACACIELjaO3tzduueWWvnsAstcQFS6LFy+OnXbaKY4++ui+j73qVa+K9vb2+NnPftb3sT/96U/x+OOPxwEHHDDg+5x00kmxdOnSkqtbAABKsXVroXJlsHMaWooBQHMQuAAAg8m8wqW3tzcWL14cixYtira2wnImT54c7373u+Oss86KHXbYISZNmhSnn356HHDAAfH//t//G/C9Tj755Fi4cOEL5r4AAFSju7twr6UYADS3NHAZaE+Q7gcELgDQnDIPXG6++eZ4/PHHB6xKueSSS6KlpSWOO+646O7ujiOOOCIuv/zyQd+rra0tdtxxx3ouFwBoQmk7sQgtxQCg2aX7AhUuAMC2Mg9cXv/610c+nx/wc+PGjYvLLrssLrvssgE/P2fOnEG/NiJiv/32G/LzAAClSB+stLYWgpVtqXABgOZQSksx+wEAaE4NMcMFAKCRpYHLYNUtEWa4AECzMMMFABhM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ZrhoKQYA1Un3AhGF/YAZLlDQ0dHR9yyuo6Mj49UAEFFB4PK73/0u/ud//ucFH99pp53iueeeq8miAACy7tleaeCipRgA1EZx4JJlSzGBC42qvb09TjvttKyXAUCRsluKTZkyJZYvX/6Cj//mN7+J2bNn12RRAADbtvRKK1waPXDRUgwAaqO4iiU9vC9wAQAaWdmBy9vf/vb4l3/5l3j66acjl8tFb29v3H777XH22WfHP/7jP9ZjjQBAExpshstItBTL57UUA4CsFVe75nLJ/WgJXNL9gMCFetq6dWssXbo0li5dGlttPgEaQtktxS644II47bTTYuedd46tW7fG3nvvHVu3bo1/+Id/iPPPP78eawQAmtBgM1xG4gFLOqC3+PuXSoULANTGtocvIkZ+hks+r8KFxrVp06ZYsGBBRESsW7cuurq6Ml4RAGUHLh0dHfHlL385PvrRj8Z9990X69ati1e84hWxxx571GN9AECTGmyGy0hUuAzUM75UZrgAQG1s2140YuQrXLZsiejt7f+9SyFwAYDmVHbgktpll11il112qeVaAAD6DBa4jMQDluJTsypcACAb2+4FIkY+cCn+PuUcwkgDF/sBAGguJQUuZ511VslvePHFF1e8GACA1LYzVNKWYiNR4VLcwiTtGV8qM1wAoDYGmqc20i3F0sAllyvvEIYKFwBoTiUFLr/5zW9KerNcuU8kAAAGkWWFy7p1yTUNecqhpRgA1EYjVbiMG1feIQyBCwA0p5IClyVLltR7HQAA/Wz7kCUNP0biAcvTTyfX6dPL/1otxQCgNoorTlNZBS7lzG+JELgAQLNqyXoBAAADGazCZSRaiqWBy4wZ5X+tlmIAUBvpXqC4pVi6H+juLgyzr6dKA5d0PyBwAYDmUlKFy7buvffeuPbaa+Pxxx+Pnp6efp/79re/XZOFAQDNbbAZLiNZ4TJzZvlfq6UYANTGQBUuxeFLd3f5QUi5VLjQyNrb2+PCCy/suwcge2VXuHzjG9+I1772tfGHP/whbrjhhti8eXPcf//98fOf/zwmT55cjzUCAE0oywqX5cuTazUVLgIXAKjOUBUuESNzCKPawMV+gHrq6OiIc845J84555zo6OjIejkARAWBywUXXBCXXHJJfP/734+Ojo743Oc+F3/84x/jbW97W+yyyy71WCMA0IQGC1xGssJF4AIA2RmowqWtrfBv7UjsCbatuC2VChcAaE5lBy4PP/xwHH300RGRJOnr16+PXC4XZ555ZlxxxRU1XyAA0Hx6ewsPKNKHLGlLsZGc4VJJSzEzXACgNgaqcCn+fRqG1JOWYjSyrVu3xi9/+cv45S9/GVttPgEaQtmBy/bbbx9r166NiIjZs2fHfffdFxERq1atig0j8QQEABjz0gcsEYWHKiNZ4VJNSzEzXACgNratdk2N5J5A4EIj27RpU+y///6x//77x6aRSCABGFZbuV/wute9Lm666abYd999Y+HChfGBD3wgfv7zn8dNN90Uhx12WD3WCAA0meLAZdsKl5FsKVZNhYvABQCqM1g7r9EQuKT7AYELADSXsgOXSy+9tC81/8hHPhLt7e1xxx13xHHHHRfnn39+zRcIADSf4sAlPSGaPujYtClpOdZSdp1uaXp6IlauTO6rmeGiqwMAVEeFCwAw2pQduOywww599y0tLfGhD32opgsCACh+wJLLJfdphUtEEroU/76WVqxIrm1tEUXbnpJpKQYAtZFWuGwbuIymGS72AwDQXEoOXLZs2RJbt26NzqKdzooVK+JLX/pSrF+/Po499tg46KCD6rJIAKC5DNRCpPhBx4YN9Qtc0nZiM2ZUVkWjpRgA1EZ6AGM0thRT4QIAzankwOXkk0+Ojo6O+K//+q+IiFi7dm3MmzcvNm3aFDNnzoxLLrkkvvvd78ZRRx1Vt8UCAM1hoBYira3Jw4vNm+v7gGX58uRaSTuxCC3FAKBWBqtwEbgAAI2q5HObt99+exx33HF9v7/mmmti69at8eCDD8Zvf/vbOOuss+Kiiy6qyyIBgOYyWM/2tKplw4b6fe/iCpdKaCkGALUxWIXLSLYUG6jqthQCFwBoTiVXuDz55JOxxx579P3+Zz/7WRx33HExefLkiIhYtGhRLF68uPYrBACazlBDclevru+J1jRwmTmzsq/XUgwAamOo/UDE6Khw2bo1Ip8vzKSDWmpvb4+Pf/zjffcAZK/kwGXcuHGxsWg3c9ddd/WraBk3blysW7eutqsDAJrSYKdJ0wqX0dBSTOACANUZbD8wGgKXtqKnLZs3R3R01G5NkOro6Ih//dd/zXoZABQpuaXYfvvtF1/96lcjIuIXv/hFrFixIg499NC+zz/88MMxa9as2q8QAGg6w51obeSWYma4AEBtjIUKlwhtxQCgmZRc4fKxj30sjjzyyLj22mtj+fLlccIJJ8TMol4bN9xwQxx44IF1WSQA0FyGm+HSyC3FzHABgNoYrMJlJGe41CJwsSegXnp7e+MPf/hDRETstdde0dJS8rlqAOqk5MDlkEMOiV/96lfx05/+NGbMmBELFy7s9/n99tsv9t9//5ovEABoPllWuGgpBgCNQYULDG3jxo3xspe9LCIi1q1bF11dXRmvCICSA5eIJC3fa6+9BvzcKaecUpMFAQBk1bM9n6++wkVLMQCojXQ/MBoDl5aW5Fdvr8AFAJqJWkMAoOEM11KsXhUuq1YVvvf06ZW9h5ZiAFAb6b/JI30Ao1ga+pQbuEQUqlwELgDQPAQuAEDDyaqFSFrdMnlyZQ9WIrQUA4BaGazCJYsZLtuGPqVI9wQCFwBoHgIXAKDhDFfhUu/ApdJ2YhFaigFArTRChUulLcUiVLgAQDMSuAAADWe4GS71aim2fHlynTGj8vfQUgwAaiOritditQhc7AkAoHmUHbgsWrQobr311nqsBQAgIrKvcKkmcNFSDABqY7ADGFm0FFPhAgCUoq3cL1i9enUcfvjhseuuu8aJJ54YixYtitmzZ9djbQBAkxruRGu9Klxq2VJM4AIAlcvns69wyecFLjS29vb2OPvss/vuAche2RUu3/nOd+LJJ5+M973vffHNb34z5syZE0ceeWRcf/31sdkuAgCogawesNSipZgZLgBQvS1bInp7k/usApeeniR0Kf6e5RC4UG8dHR1x0UUXxUUXXRQdHR1ZLweAqHCGy7Rp0+Kss86K3/72t3H33XfHi1/84njXu94Vs2bNijPPPDMefPDBkt/rySefjOOPPz6mTp0a48ePj3333Tfuvffevs/n8/n42Mc+FjNnzozx48fH4Ycf/oL3z+Vykcvl4q677ur38e7u7pg6dWrkcrlYunRpJX9UACADg7UQSVuKNXKFixkuAFC99PBFxOAz3eoduBS/v8AFAChFRYFLavny5XHTTTfFTTfdFK2trXHUUUfF7373u9h7773jkksuGfbrn3/++TjwwAOjvb09fvSjH8Xvf//7+M///M/Yfvvt+15z4YUXxuc///n40pe+FHfffXd0dXXFEUccEZu2ada68847x+LFi/t97IYbboiJEydW80cEADKQVYWLGS4A0BiKf+Tfdj8wUjNc0vfP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Lp/85CfjS1/6Unz5y1+O9nT3EBEHHnhg/PrXv67p4gCA5jPcidZaV7ikgUut5rdEaCkGANUabj9Q78Cl2vktEQIXAGhGZQcuf/rTn+J1r3vdCz4+efLkWLVqVS3WBAA0sZE+0Zq2FKtH4KKlGABUZrj9QL1bitUycHEAAwCaR9mBy4wZM+Khhx56wcdvu+222K0WNbcAQFMrdYaLlmIAMHaNdIvRlAoXAKAabeV+wcknnxwf+MAH4sorr4xcLhdPPfVU3HnnnXH22WfHRz/60XqsEQBoIqU+YKlVS7F6VrgIXACgMmnlSlYzXAQujAatra3x1re+te8egOyVHbh86EMfit7e3jjssMNiw4YN8brXvS46Ozvj7LPPjtNPP70eawQAmshI92w3wwUAGk8WFS5btkQ8/nhyL3BhNBg3blxcd911WS8DgCIlBy6PPvpozJ07N3K5XHzkIx+Jc845Jx566KFYt25d7L333jFx4sR6rhMAaBLD9WxPW4rVqsKlHi3FzHABgMr19hZCipGc4fLEE8m/3Z2dtdkXpPsBgQsANI+SA5fdd989dt1111iwYEEceuihsWDBgth7773ruTYAoAmN5InWfL4+LcXMcAGAyqV7gYjh9wObNychSS26KaXtxObMiWgpe+LtC6lwAYDmU3Lg8vOf/zyWLl0aS5cuja9//evR09MTu+22W1/4smDBgpg+fXo91woANIHhApdaVrisXl34flqKAUBjKK5aGS5wiUgOYdSi6UYt57dEFAIX+wHqZf369X0dZ9atWxddXV0ZrwiAkgOX+fPnx/z58yMiYtOmTXHHHXf0BTBXX311bN68Ofbcc8+4//7767VWAKAJlDPDJZ+PyOUq/15pO7HJk/s/uKmWlmIAULn0MEQuVwgttlXcaqzRAxcVLgDQPEoOXIqNGzcuDj300DjooINiwYIF8aMf/Sj+67/+K/74xz/Wen0AQJMpdYZLPh/R0zN4MFOKerQTi9BSDACqUVztOtjBipaWiI6OZC9QqzkuAhcAoFplBS49PT1x1113xZIlS2Lp0qVx9913x8477xyve93r4tJLL41DDjmkXusEAJpEqTNcIpK2YtUELmmFSy0G4xbTUgwAKpcGKIMdvkiNH58ELrWY6xYR8cgjyVXgAgBUquTA5dBDD42777475s6dG4cccki8973vjf/5n/+J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TZqE3bt3Y9KkSbj++utN/d4DDzyAgwcPHv/atm1b2MdCRERE5GadOwMDBkhmy8iROrslLU2+iIiIKLZ06ACULy/7DLhEj+zsbLRq1QqtWrVCdna204dDRERwMOCyePFi7N27F+3atUNCQgISEhIwe/ZsvPbaa0hISEDNmjWRl5eHzMzMIr+3Z88e1Arw6d+mTRu0aNEC11xzDU455RS0bt3a1HEkJyejQoUKRb6IiIiIvG70aOnp8ssvwLhx8j2WEyMiIopNCQlA9+6yX7u2s8dC5hmGgVWrVmHVqlUwDMPpwyEiIjgYcDn33HOxfPlyLF269PhXhw4dcO211x7fT0xMxPTp04//ztq1a7F161Z07do14H1ef/31mDVrlunsFiIiIqJY1bgx8O9/y/5zz8mWARciIqLY9dRTwBVXADfd5PSREBERRa8Epx64fPnyJ2ShpKWloWrVqse/f8MNN+Duu+9GlSpVUKFCBfz73/9G165d0aVLl4D3edNNN+HKK688oe8LEREREZ3ooYeAsWOBf/6RfzPgQkREFLvatgUmTXL6KIiIiKKbYxkuZrz88svo27cv+vfvj27duqFWrVqYPHlyibdPSEhAtWrVkJDgWByJiIiIKGpUrgw8+qj+NwMuRERERERERKHzGSzyWMShQ4dQsWJFHDx4kP1ciIiIyPPy8oCWLYGNG4HHHgNGjXL6iIiIiIjIjKysLKSnpwMAjhw5grS0NIePiIjIu8zGDVyd4UJERERE9kpKAj7/HBgwABgyxOmjISIiIiIiIoperL1FREREFOM6dgQmTHD6KIiIiIgoGD6fDw0bNjy+T0REzmPAhYiIiIiIiIiIKMqkpqZiy5YtTh8GERH5YUkxIiIiIiIiIiIiIiKiMDHgQkREREREREREREREFCYGXIiIiIiIiIiIiKLM0aNH0bFjR3Ts2BFHjx51+nCIiAjs4UJERERERERERBR1CgsLsWjRouP7RETkPGa4EBERERERERERERERhYkBFyIiIiIiIiIiIiIiojAx4EJERERERERERERERBQmBlyIiIiIiIiIiIiIiIjCxIALERERERERERERERFRmBKcPgAiIiIiIiIiIiIKXrVq1Zw+BCIi8sOACxERERERERERUZRJS0vDvn37nD4MIiLyw5JiREREREREREREREREYWLAhYiIiIiIiIiIiIiIKEwMuBAREREREREREUWZo0ePokePHujRoweOHj3q9OEQERHYw4WIiIiIiIiIiCjqFBYWYvbs2cf3iYjIecxwISIiIiIiIiIiIiIiChMDLkRERERERERERERERGFiwIWIiIiIiIiIiIiIiChMDLgQERERERERERERERGFiQEXIiIiIiIiIiIiIiKiMCU4fQBEREREREREREQUvNTUVKcPgYiI/DDgQkREREREREREFGXS0tKQlZXl9GEQEZEflhQjIiIiIiIiIiIiIiIKEwMuREREREREREREREREYWLAhYiIiIiIiIiIKMrk5OTgoosuwkUXXYScnBynD4eIiMAeLkRERERERERERFGnoKAAP/zww/F9IiJyHjNciIiIiIiIiIiIiIiIwsSACxERERERERERERERUZgYcCEiIiIiIiIiIiIiIgoTAy5ERERERERERERERERhYsCFiIiIiIiIiIiIiIgoTAlOH4DbGIYBADh06JDDR0JERERERERERBRYVlbW8f1Dhw6hoKDAwaMhIvI2FS9Q8YOSMOBSzOHDhwEA9evXd/hIiIiIiIiIiIiIylanTh2nD4GIKCYcPnwYFStWLPHnPqOskEyMKSwsxM6dO1G+fHn4fD5L7vPQoUOoX78+tm3bhgoVKlhyn0RW43lK0YjnLUUbnrMUDXieUrTiuUvRhucsRQueqxSNeN6S1QzDwOHDh1GnTh3ExZXcqYUZLsXExcWhXr16ttx3hQoV+AIn1+N5StGI5y1FG56zFA14nlK04rlL0YbnLEULnqsUjXjekpVKy2xRSg7FEBERERERERERERERkSkMuBAREREREREREREREYWJAZcISE5OxqhRo5CcnOz0oRCViOcpRSOetxRteM5SNOB5StGK5y5FG56zFC14rlI04nlLTvEZhmE4fRBERERERERERERERETRjBkuREREREREREREREREYWLAhYiIiIiIiIiIiIiIKEwMuBAREREREREREREREYWJARciIiIiIiIiIiIiIqIwxWzAZfTo0ejYsSPKly+PGjVq4NJLL8XatWuL3CYnJwfDhw9H1apVkZ6ejv79+2PPnj1FbnPHHXegffv2SE5OxmmnnRbwsZYtW4azzz4bKSkpqF+/PsaMGWPqGN988000atQIKSkp6Ny5M/74448iP3/vvffQo0cPVKhQAT6f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aD9vDcMw7rvvPqNmzZpGYmKi0bRpU+PFF180CgsLQ35OyN0iec42bNgw4G3KMnHiRKNZs2ZGUlKS0apVK+P7778v8vOxY8cGvN9Ro0aF89SQi0T7eZqdnW307t3bqF69upGYmGg0bNjQuOmmm4pcuJI3Rfu5axiG8eqrrxr16tUzEhMTjQYNGhgPP/xwkUAPeUukztnBgwcH/Hn37t3LPEbOFZBhRP+5yvmC2BXt565hcM6ASuczDMMAERERERERERERERERhSxme7gQERERERERERERERFZhQEXIiIiIiIiIiIiIiKiMDHgQkREREREREREREREFCYGXIiIiIiIiIiIiIiIiMLEgAsREREREREREREREVGYGHAhIiIiIiIiIiIiIiIKEwMuREREREREREREREREYWLAhYiIiIiIiIiIiIiIKEwMuBAREREREREREREREYWJARciIiIiIvK0IUOGwOfzwefzITExETVr1sR5552HDz/8EIWFhabv56OPPkKlSpXsO1AiIiIiIopqDLgQEREREZHn9enTB7t27cKWLVswdepUnHPOORgxYgT69u2L/Px8pw+PiIiIiIg8gAEXIiIiIiLyvOTkZNSqVQt169ZFu3bt8OCDD+Kbb77B1KlT8dFHHwEAXnrpJbRp0wZpaWmoX78+brvtNhw5cgQAMGvWLAwdOhQHDx48ni3z2GOPAQByc3MxcuRI1K1bF2lpaejcuTNmzZrlzH+UiIiIiIgcw4ALERERERHFpJ49e6Jt27aYPHkyACAuLg6vvfYaVq5ciXHjxmHGjBm49957AQBnnHEGXnnlFVSoUAG7du3Crl27MHLkSADA7bffjvnz52PChAlYtmwZrrzySvTp0wfr16937P9GRERERESR5zMMw3D6IIiIiIiIiOwyZMgQZGZm4uuvvz7hZ1dffTWWLVuGVatWnfCzL774AsOGDcP+/fsBSA+XO++8E5mZmcdvs3XrVjRp0gRbt25FnTp1jn+/V69e6NSpE5555hnL/z9EREREROROCU4fABERERERkVMMw4DP5wMA/PLLLxg9ejTWrFmDQ4cOIT8/Hzk5OcjOzkZqamrA31++fDkKCgrQrFmzIt/Pzc1F1apVbT9+IiIiIiJyDwZciIiIiIgoZq1evRqNGzfGli1b0LdvX9x66614+umnUaVKFcyZMwc33HAD8vLySgy4HDlyBPHx8Vi8eDHi4+OL/Cw9PT0S/wUiIiIiInIJBlyIiIiIiCgmzZgxA8uXL8ddd92FxYsXo7CwEC+++CLi4qTV5cSJE4vcPikpCQUFBUW+d/rpp6OgoAB79+7F2WefHbFjJyIiIiIi92HAhYiIiIiIPC83Nxe7d+9GQUEB9uzZg2nTpmH06NHo27cvBg0ahBUrVuDYsWN4/fXX0a9fP8ydOxfvvPNOkfto1KgRjhw5gunTp6Nt27ZITU1Fs2bNcO2112LQoEF48cUXcfrpp2Pfvn2YPn06Tj31VFx00UUO/Y+JiIiIiCjS4pw+ACIiIiIiIrtNmzYNtWvXRqNGjdCnTx/MnDkTr732Gr755hvEx8ejbdu2eOmll/Dcc8+hdevWGD9+PEaPHl3kPs444wwMGzYMAwYMQPXq1TFmzBgAwNixYzFo0CD85z//QfPmzXHppZdi4cKFaNCggRP/VSIiIiIicojPMAzD6YMgIiIiIiIiIiIiIiKKZsxwISIiIiIiIiIiIiIiChMDLkRERERERERERERERGFiwIWIiIiIiIiIiIiIiChMDLgQERERERERERERERGFiQEXIiIiIiIiIiIiIiKiMDHgQkREREREREREREREFCYGXIiIiIiIiIiIiIiIiMLEgAsREREREREREREREVGYGHAhIiIiIiIiIiIiIiIKEwMuREREREREREREREREYWLAhYiIiIiIiIiIiIiIKEz/By7vAl0mdzp8AAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Model"],"metadata":{"id":"4YVPTF76Yg7C"}},{"cell_type":"code","source":["df1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"ZfSHJZLoZHME","executionInfo":{"status":"ok","timestamp":1737524654123,"user_tz":-480,"elapsed":10,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"f65fc7c5-34db-40d4-c27a-0e4f8dada4dd"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Store  Dept       Date  Weekly_Sales  IsHoliday  Temperature  \\\n","0           1     1 2010-02-05      24924.50          0        42.31   \n","1           1     1 2010-02-12      46039.49          1        38.51   \n","2           1     1 2010-02-19      41595.55          0        39.93   \n","3           1     1 2010-02-26      19403.54          0        46.63   \n","4           1     1 2010-03-05      21827.90          0        46.50   \n","...       ...   ...        ...           ...        ...          ...   \n","421565     45    98 2012-09-28        508.37          0        64.88   \n","421566     45    98 2012-10-05        628.10          0        64.89   \n","421567     45    98 2012-10-12       1061.02          0        54.47   \n","421568     45    98 2012-10-19        760.01          0        56.47   \n","421569     45    98 2012-10-26       1076.80          0        58.85   \n","\n","        Fuel_Price         CPI  Unemployment  Type    Size  year  month  day  \n","0            2.572  211.096358         8.106     1  151315  2010      2    5  \n","1            2.548  211.242170         8.106     1  151315  2010      2   12  \n","2            2.514  211.289143         8.106     1  151315  2010      2   19  \n","3            2.561  211.319643         8.106     1  151315  2010      2   26  \n","4            2.625  211.350143         8.106     1  151315  2010      3    5  \n","...            ...         ...           ...   ...     ...   ...    ...  ...  \n","421565       3.997  192.013558         8.684     2  118221  2012      9   28  \n","421566       3.985  192.170412         8.667     2  118221  2012     10    5  \n","421567       4.000  192.327265         8.667     2  118221  2012     10   12  \n","421568       3.969  192.330854         8.667     2  118221  2012     10   19  \n","421569       3.882  192.308899         8.667     2  118221  2012     10   26  \n","\n","[421570 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-759cecc2-7305-430f-abd5-21671613bd61\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Store</th>\n","      <th>Dept</th>\n","      <th>Date</th>\n","      <th>Weekly_Sales</th>\n","      <th>IsHoliday</th>\n","      <th>Temperature</th>\n","      <th>Fuel_Price</th>\n","      <th>CPI</th>\n","      <th>Unemployment</th>\n","      <th>Type</th>\n","      <th>Size</th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>day</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-05</td>\n","      <td>24924.50</td>\n","      <td>0</td>\n","      <td>42.31</td>\n","      <td>2.572</td>\n","      <td>211.096358</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>2</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-12</td>\n","      <td>46039.49</td>\n","      <td>1</td>\n","      <td>38.51</td>\n","      <td>2.548</td>\n","      <td>211.242170</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>2</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-19</td>\n","      <td>41595.55</td>\n","      <td>0</td>\n","      <td>39.93</td>\n","      <td>2.514</td>\n","      <td>211.289143</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>2</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-02-26</td>\n","      <td>19403.54</td>\n","      <td>0</td>\n","      <td>46.63</td>\n","      <td>2.561</td>\n","      <td>211.319643</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>2</td>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2010-03-05</td>\n","      <td>21827.90</td>\n","      <td>0</td>\n","      <td>46.50</td>\n","      <td>2.625</td>\n","      <td>211.350143</td>\n","      <td>8.106</td>\n","      <td>1</td>\n","      <td>151315</td>\n","      <td>2010</td>\n","      <td>3</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>421565</th>\n","      <td>45</td>\n","      <td>98</td>\n","      <td>2012-09-28</td>\n","      <td>508.37</td>\n","      <td>0</td>\n","      <td>64.88</td>\n","      <td>3.997</td>\n","      <td>192.013558</td>\n","      <td>8.684</td>\n","      <td>2</td>\n","      <td>118221</td>\n","      <td>2012</td>\n","      <td>9</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>421566</th>\n","      <td>45</td>\n","      <td>98</td>\n","      <td>2012-10-05</td>\n","      <td>628.10</td>\n","      <td>0</td>\n","      <td>64.89</td>\n","      <td>3.985</td>\n","      <td>192.170412</td>\n","      <td>8.667</td>\n","      <td>2</td>\n","      <td>118221</td>\n","      <td>2012</td>\n","      <td>10</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>421567</th>\n","      <td>45</td>\n","      <td>98</td>\n","      <td>2012-10-12</td>\n","      <td>1061.02</td>\n","      <td>0</td>\n","      <td>54.47</td>\n","      <td>4.000</td>\n","      <td>192.327265</td>\n","      <td>8.667</td>\n","      <td>2</td>\n","      <td>118221</td>\n","      <td>2012</td>\n","      <td>10</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>421568</th>\n","      <td>45</td>\n","      <td>98</td>\n","      <td>2012-10-19</td>\n","      <td>760.01</td>\n","      <td>0</td>\n","      <td>56.47</td>\n","      <td>3.969</td>\n","      <td>192.330854</td>\n","      <td>8.667</td>\n","      <td>2</td>\n","      <td>118221</td>\n","      <td>2012</td>\n","      <td>10</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>421569</th>\n","      <td>45</td>\n","      <td>98</td>\n","      <td>2012-10-26</td>\n","      <td>1076.80</td>\n","      <td>0</td>\n","      <td>58.85</td>\n","      <td>3.882</td>\n","      <td>192.308899</td>\n","      <td>8.667</td>\n","      <td>2</td>\n","      <td>118221</td>\n","      <td>2012</td>\n","      <td>10</td>\n","      <td>26</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>421570 rows × 14 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-759cecc2-7305-430f-abd5-21671613bd61')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-759cecc2-7305-430f-abd5-21671613bd61 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-759cecc2-7305-430f-abd5-21671613bd61');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ab314a71-d809-4abe-b44a-ba1f28d61832\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ab314a71-d809-4abe-b44a-ba1f28d61832')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ab314a71-d809-4abe-b44a-ba1f28d61832 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_aaf876bc-b75f-4366-8f32-f48aded9403f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_aaf876bc-b75f-4366-8f32-f48aded9403f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df1"}},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["feature = df1.drop(['Weekly_Sales', 'Date'], axis=1)\n","target = df1['Weekly_Sales']"],"metadata":{"id":"TdjTlRyWhs6S","executionInfo":{"status":"ok","timestamp":1737524654123,"user_tz":-480,"elapsed":9,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(feature, target, test_size = 0.2, random_state =42)"],"metadata":{"id":"BVHSgvYHYgWC","executionInfo":{"status":"ok","timestamp":1737524654123,"user_tz":-480,"elapsed":8,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["# Model\n","from sklearn.linear_model import LinearRegression\n","from sklearn.preprocessing import StandardScaler, PolynomialFeatures\n","from sklearn.linear_model import Ridge, Lasso\n","from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor"],"metadata":{"id":"kZMCwZEuh7qI","executionInfo":{"status":"ok","timestamp":1737524654124,"user_tz":-480,"elapsed":9,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["models = {\n","    'Linear Regression': LinearRegression(),\n","    'Ridge Regression': Ridge(),\n","    'Lasso Regression': Lasso(),\n","    'Random Forest': RandomForestRegressor(),\n","    'Gradient Boosting': GradientBoostingRegressor()\n","}"],"metadata":{"id":"V0xf34ssiMsB","executionInfo":{"status":"ok","timestamp":1737524654124,"user_tz":-480,"elapsed":8,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["results= []\n","\n","for model_name in models:\n","  model = models[model_name]\n","  model_train = model.fit(X_train, y_train)\n","  model_predict = model_train.predict(X_test)\n","\n","  model_mse = mean_squared_error(y_test, model_predict)\n","  model_r2 = r2_score(y_test, model_predict)\n","  results.append((model_name, model_mse, model_r2))\n","\n","print(results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CGjtgDosiW2X","executionInfo":{"status":"ok","timestamp":1737525021055,"user_tz":-480,"elapsed":366939,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"1bc50d3e-4249-4a8f-efd6-0df0ea269ec2"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["[('Linear Regression', 475398472.28806806, 0.08835107075743198), ('Ridge Regression', 475398470.4980744, 0.0883510741900172), ('Lasso Regression', 475398309.1577745, 0.08835138358459937), ('Random Forest', 12247008.221955454, 0.9765144976629097), ('Gradient Boosting', 136623101.9840733, 0.7380044070522254)]\n"]}]},{"cell_type":"code","source":["# Convert the list to a DataFrame\n","df_model_scores = pd.DataFrame(results, columns=['Model', 'Score', 'R_Score'])\n","\n","# Sort values\n","df_model_scores = df_model_scores.sort_values(by='Score', ascending=True)\n","df_r2 = df_model_scores.sort_values(by='R_Score', ascending=False)"],"metadata":{"id":"ipgdmt-0lK43","executionInfo":{"status":"ok","timestamp":1737525021055,"user_tz":-480,"elapsed":8,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["df_model_scores"],"metadata":{"id":"kcIEFp90EjCt","executionInfo":{"status":"ok","timestamp":1737525021055,"user_tz":-480,"elapsed":7,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"3d6185c1-7c6d-451f-d884-71ddbb51812e","colab":{"base_uri":"https://localhost:8080/","height":206}},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               Model         Score   R_Score\n","3      Random Forest  1.224701e+07  0.976514\n","4  Gradient Boosting  1.366231e+08  0.738004\n","2   Lasso Regression  4.753983e+08  0.088351\n","1   Ridge Regression  4.753985e+08  0.088351\n","0  Linear Regression  4.753985e+08  0.088351"],"text/html":["\n","  <div id=\"df-fc4b689a-a137-4c9d-a067-5b750195044f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Score</th>\n","      <th>R_Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>Random Forest</td>\n","      <td>1.224701e+07</td>\n","      <td>0.976514</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Gradient Boosting</td>\n","      <td>1.366231e+08</td>\n","      <td>0.738004</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Lasso Regression</td>\n","      <td>4.753983e+08</td>\n","      <td>0.088351</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Ridge Regression</td>\n","      <td>4.753985e+08</td>\n","      <td>0.088351</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Linear Regression</td>\n","      <td>4.753985e+08</td>\n","      <td>0.088351</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc4b689a-a137-4c9d-a067-5b750195044f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fc4b689a-a137-4c9d-a067-5b750195044f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fc4b689a-a137-4c9d-a067-5b750195044f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7824f166-485a-4f10-9d44-d70eba00f06e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7824f166-485a-4f10-9d44-d70eba00f06e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7824f166-485a-4f10-9d44-d70eba00f06e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_3be661ef-ac08-4566-bda9-d830ef8c1df2\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_model_scores')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_3be661ef-ac08-4566-bda9-d830ef8c1df2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_model_scores');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_model_scores","summary":"{\n  \"name\": \"df_model_scores\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Gradient Boosting\",\n          \"Linear Regression\",\n          \"Lasso Regression\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 223975806.59138146,\n        \"min\": 12247008.221955454,\n        \"max\": 475398472.28806806,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          136623101.9840733,\n          475398472.28806806,\n          475398309.1577745\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.42950769966199215,\n        \"min\": 0.08835107075743198,\n        \"max\": 0.9765144976629097,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7380044070522254,\n          0.08835107075743198,\n          0.08835138358459937\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["fig, ax = plt.subplots(2,1, figsize=(10, 6))\n","\n","# Create a bar plot\n","\n","sns.barplot(x='Score', y='Model', data=df_model_scores, palette='viridis', ax=ax[0])\n","ax[0].set_title('Model Performance Comparison')\n","plt.xlabel('Score (Lower is Better)')\n","plt.ylabel('Model')\n","\n","sns.barplot(x='R_Score', y='Model', data=df_r2, palette='viridis', ax=ax[1])\n","ax[1].set_title('Model Performance Comparison')\n","plt.xlabel('R_Score (Higher is Better)')\n","plt.ylabel('Model')\n","\n","plt.tight_layout()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":801},"id":"6rbsRVzyu2Oe","executionInfo":{"status":"ok","timestamp":1737525021700,"user_tz":-480,"elapsed":651,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"6b6897ae-d626-4ba4-ceef-77b719dd6c17"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-39-90c5eb10f78f>:5: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(x='Score', y='Model', data=df_model_scores, palette='viridis', ax=ax[0])\n","<ipython-input-39-90c5eb10f78f>:10: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(x='R_Score', y='Model', data=df_r2, palette='viridis', ax=ax[1])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Forecasting"],"metadata":{"id":"5SkYOu6OXZft"}},{"cell_type":"markdown","source":["## ARIMA"],"metadata":{"id":"OpMbzV1klSBe"}},{"cell_type":"code","source":["from statsmodels.tsa.arima.model import ARIMA"],"metadata":{"id":"Aadri3w5Xe8k","executionInfo":{"status":"ok","timestamp":1737525022218,"user_tz":-480,"elapsed":520,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["weekly_sale = df1.groupby('Date')['Weekly_Sales'].sum().reset_index()\n","\n","weekly_sale.set_index('Date',inplace =True)"],"metadata":{"id":"kFTAbaGjXm7g","executionInfo":{"status":"ok","timestamp":1737525022219,"user_tz":-480,"elapsed":15,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["weekly_sale"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"sTMRATN3hmUd","executionInfo":{"status":"ok","timestamp":1737525022219,"user_tz":-480,"elapsed":14,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"97e08272-13fb-40d4-b6d0-e7aa97fa744b"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Weekly_Sales\n","Date                    \n","2010-02-05   49750740.50\n","2010-02-12   48336677.63\n","2010-02-19   48276993.78\n","2010-02-26   43968571.13\n","2010-03-05   46871470.30\n","...                  ...\n","2012-09-28   43734899.40\n","2012-10-05   47566639.31\n","2012-10-12   46128514.25\n","2012-10-19   45122410.57\n","2012-10-26   45544116.29\n","\n","[143 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-8d6f39b3-1a37-47e0-a651-9557f7d1e135\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Weekly_Sales</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2010-02-05</th>\n","      <td>49750740.50</td>\n","    </tr>\n","    <tr>\n","      <th>2010-02-12</th>\n","      <td>48336677.63</td>\n","    </tr>\n","    <tr>\n","      <th>2010-02-19</th>\n","      <td>48276993.78</td>\n","    </tr>\n","    <tr>\n","      <th>2010-02-26</th>\n","      <td>43968571.13</td>\n","    </tr>\n","    <tr>\n","      <th>2010-03-05</th>\n","      <td>46871470.30</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2012-09-28</th>\n","      <td>43734899.40</td>\n","    </tr>\n","    <tr>\n","      <th>2012-10-05</th>\n","      <td>47566639.31</td>\n","    </tr>\n","    <tr>\n","      <th>2012-10-12</th>\n","      <td>46128514.25</td>\n","    </tr>\n","    <tr>\n","      <th>2012-10-19</th>\n","      <td>45122410.57</td>\n","    </tr>\n","    <tr>\n","      <th>2012-10-26</th>\n","      <td>45544116.29</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>143 rows × 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d6f39b3-1a37-47e0-a651-9557f7d1e135')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8d6f39b3-1a37-47e0-a651-9557f7d1e135 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8d6f39b3-1a37-47e0-a651-9557f7d1e135');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-95c43aa5-79c9-44f0-9075-f43d93e70c2d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-95c43aa5-79c9-44f0-9075-f43d93e70c2d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-95c43aa5-79c9-44f0-9075-f43d93e70c2d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_31c078d1-3b58-4636-b53a-3c478c0c26b9\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('weekly_sale')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_31c078d1-3b58-4636-b53a-3c478c0c26b9 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('weekly_sale');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"weekly_sale","summary":"{\n  \"name\": \"weekly_sale\",\n  \"rows\": 143,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-02-05 00:00:00\",\n        \"max\": \"2012-10-26 00:00:00\",\n        \"num_unique_values\": 143,\n        \"samples\": [\n          \"2012-05-04 00:00:00\",\n          \"2010-06-18 00:00:00\",\n          \"2011-09-02 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weekly_Sales\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5444206.202536559,\n        \"min\": 39599852.99,\n        \"max\": 80931415.6,\n        \"num_unique_values\": 143,\n        \"samples\": [\n          47124197.93,\n          47622046.23,\n          45376623.27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["train = weekly_sale.iloc[:-52]\n","test = weekly_sale.iloc[-52:]"],"metadata":{"id":"zTqCnQGGiK2m","executionInfo":{"status":"ok","timestamp":1737525022219,"user_tz":-480,"elapsed":11,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["# Grid search parameters\n","best_aic = np.inf\n","best_order = None\n","best_model = None\n","\n","# Define p, d, q values range\n","p_values = range(0, 8)\n","d_values = range(0, 3)\n","q_values = range(0, 8)\n","\n","for p in p_values:\n","  for d in d_values:\n","    for q in q_values:\n","      try:\n","        model = ARIMA(train, order=(p, d, q))\n","        model_fit = model.fit()\n","        aic = model_fit.aic\n","        if aic < best_aic:\n","          best_aic = aic\n","          best_order = (p, d, q)\n","          best_model = model_fit\n","      except Exception as e:\n","        continue\n","        print(f\"Error with order {p}, {d}, {q}: {e}\")\n","\n","print(f'Best order:{best_order} with best AIC: {best_aic}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"alRaBdsoiVY9","executionInfo":{"status":"ok","timestamp":1737525127723,"user_tz":-480,"elapsed":105514,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"f79d82cf-2159-4b7a-97d2-11eb7cd5a0ed"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["Best order:(0, 1, 5) with best AIC: 3050.934138206911\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"]}]},{"cell_type":"code","source":["# Prediction\n","\n","predictions = best_model.forecast(steps=len(test))\n","\n","model_mse = mean_squared_error(test, predictions)\n","rmse = np.sqrt(model_mse)\n","model_r2 = r2_score(test, predictions)\n","\n","print(f'RMSE: {rmse}')\n","print(f'R2: {model_r2}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3XzcMK4cjtE2","executionInfo":{"status":"ok","timestamp":1737525127723,"user_tz":-480,"elapsed":37,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"16cd476c-0cbc-4f2a-fef6-f62808b89e28"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE: 6263405.379480005\n","R2: -0.16666116456400593\n"]}]},{"cell_type":"code","source":["fig, ax = plt.subplots(figsize=(20,10))\n","\n","sns.lineplot(x=train.index, y='Weekly_Sales', data=train, color ='Blue',ax=ax, label='Training')\n","sns.lineplot(x=test.index, y='Weekly_Sales', data=test, color ='Red',ax=ax, label='Testing')\n","sns.lineplot(x=test.index, y=predictions, color ='Orange', ax=ax, label='Prediction')\n","ax.set_title('ARIMA Weekly Sale Forecast')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":626},"id":"EG87vtWpkGhm","executionInfo":{"status":"ok","timestamp":1737525128513,"user_tz":-480,"elapsed":796,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"0ea4337c-a3a5-42a6-a4b6-4f5e41a9605d"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'ARIMA Weekly Sale Forecast')"]},"metadata":{},"execution_count":46},{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x1000 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABkgAAANXCAYAAAB+MNPXAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzs3XecXHW5P/BnNmXTCyEVQipNQKWJQCgBpCME6aiAXi5KUxFR9IpgAcWGioJeFEQDiFLkdxHpCARFUIrSBAmhRQklJCFkU3Z+f4xnZ3ezZWZ2dqec9/v12teZnfrdRdkv53Oe58lks9lsAAAAAAAApEhDpRcAAAAAAADQ1wQkAAAAAABA6ghIAAAAAACA1BGQAAAAAAAAqSMgAQAAAAAAUkdAAgAAAAAApI6ABAAAAAAASB0BCQAAAAAAkDoCEgAAAAAAIHUEJAAAQJ879thjY9iwYd0+b9ddd41dd9219xdUossuuywymUw899xzlV4KAABQJAEJAABExI9+9KPIZDKx3XbbdfqcTCbT5mvEiBGxyy67xI033rjWc5MT5w8++GDLfWeffXZkMploaGiIF154Ya3XLFmyJAYPHhyZTCZOPvnkDtfwxBNPRCaTiUGDBsXixYsL+tnOP//8yGQy8dBDD7W5P5vNxujRoyOTycT8+fPbPLZixYpobGyMo446qqDPqBXLli2LL33pS7H55pvH0KFDY8yYMfHud787PvGJT8TLL79c6eXFXXfdtdb/zpKvI444otLL63W/+93v4uyzz670MgAASIn+lV4AAABUg7lz58bUqVPjz3/+czzzzDMxc+bMDp/3vve9Lz784Q9HNpuNBQsWxEUXXRQHHHBA3HTTTbHXXnsV9FmNjY1x5ZVXxhlnnNHm/muvvbbb1/7yl7+MCRMmxBtvvBG/+c1v4r/+67+6fc2sWbMiIuLee++NLbfcsuX+xx57LBYvXhz9+/ePefPmxbRp01oee+CBB2LlypUtr60Hq1atip133jmefPLJOOaYY+KUU06JZcuWxWOPPRZXXHFFzJkzJyZNmlTpZUZExKmnnhrbbrttm/umTp1amcX0od/97nfxwx/+UEgCAECfEJAAAJB68+fPj/vuuy+uvfbaOOGEE2Lu3LnxpS99qcPnbrTRRvHBD36w5fsPfOAD8Y53vCO+973vFRyQ7Lvvvh0GJFdccUXst99+cc0113T4umw2G1dccUUcddRRMX/+/Jg7d25BAck222wTgwYNinvvvTdOOeWUlvvnzZsXY8aMiW222SbuvffeNj/XvffeGxFRVwHJ9ddfHw899FDMnTt3rcqYFStWxMqVKyu0srXttNNOccghh5T9fd96660YOnRo2d8XAABqkRZbAACk3ty5c2P06NGx3377xSGHHBJz584t+LWbbrpprLvuuvHPf/6z4NccddRR8fDDD8eTTz7Zct+//vWvuOOOO7psaTVv3rx47rnn4ogjjogjjjgi7r777njxxRe7/byBAwfGtttuG/PmzVvr/bbffvvYcccdO3xs1KhRsfnmm0dERHNzc1xwwQWx2WabxaBBg2L8+PFxwgknxBtvvLHW5910002x0047xdChQ2P48OGx3377xWOPPdbtOh9++OEYO3Zs7LrrrrFs2bK1Hl+2bFkMHTo0PvGJT6z12Isvvhj9+vWL8847r9P3T/4Z7bjjjms9NmjQoBgxYkTL948++mgce+yxMX369Bg0aFBMmDAhPvKRj8Rrr73W7c8RUfrvoFAPPfRQ7LPPPjFixIgYNmxY7L777vGnP/2pzXOSNm9/+MMf4sQTT4xx48bF+uuvX/Qan3zyyTjssMNi7NixMXjw4Nh4443jC1/4QsvjCxYsiBNPPDE23njjGDx4cIwZMyYOPfTQteayrFq1Ks4555zYcMMNY9CgQTFmzJiYNWtW3HrrrRGRm0vzwx/+MCLatrMDAIDeIiABACD15s6dGwcffHAMHDgwjjzyyHj66afjgQceKOi1b775ZrzxxhsxevTogj9v5513jvXXXz+uuOKKlvt+9atfxbBhw2K//fbrcp0zZsyIbbfdNg444IAYMmRIXHnllQV95qxZs+Kll15qc9J63rx5scMOO8QOO+zQ0m4rIlepct9998X2228fDQ25/2Q44YQT4jOf+UzsuOOO8b3vfS+OO+64mDt3buy1116xatWqlvf8xS9+Efvtt18MGzYsvvGNb8QXv/jFePzxx2PWrFldDjJ/4IEHYrfddostt9wybrrppg4HuA8bNizmzJkTv/rVr2LNmjVtHrvyyisjm83G0Ucf3elnTJkyJSIiLr/88shms13+vm699dZ49tln47jjjosf/OAHccQRR8RVV10V++67b7evLfV30NrSpUvj1VdfbfPV3NwcEbnWaDvttFM88sgjccYZZ8QXv/jFmD9/fuy6665x//33r/VeJ554Yjz++ONx1llnxec+97mi1vjoo4/GdtttF3fccUccf/zx8b3vfS8OOuig+H//7/+1POeBBx6I++67L4444oj4/ve/Hx/72Mfi9ttvj1133TWWL1/e8ryzzz47zjnnnJg9e3ZceOGF8YUvfCE22GCD+Otf/xoRuf+Nve9972tZX/IFAAC9JgsAACn24IMPZiMie+utt2az2Wy2ubk5u/7662c/8YlPrPXciMh+9KMfzS5atCj7yiuvZB988MHs3nvvnY2I7De/+c02z7300kuzEZF94IEHWu770pe+lI2I7KJFi7Knn356dubMmS2Pbbvtttnjjjuu5XNOOumkNu+3cuXK7JgxY7Jf+MIXWu476qijsu9617sK+jlvvPHGbERkf/GLX2Sz2Wx24cKF2YjI/uEPf8guXbo0269fv+yNN96YzWaz2b///e/ZiMh+7Wtfy2az2ew999yTjYjs3Llz27zn73//+zb3L126NDtq1Kjs8ccf3+Z5//rXv7IjR45sc/8xxxyTHTp0aDabzWbvvffe7IgRI7L77bdfdsWKFW1eu8suu2R32WWXlu9vvvnmbERkb7rppjbPe+c739nmeR1Zvnx5duONN85GRHbKlCnZY489NvvTn/40++9//7vD57Z35ZVXZiMie/fdd7fcl/xznj9/ftG/g47ceeed2Yjo8Cv5jIMOOig7cODA7D//+c+W17388svZ4cOHZ3feeee11jZr1qzs6tWrW+4vZo0777xzdvjw4dkFCxa0eW5zc3OXv6s//vGP2YjIXn755S33vetd78rut99+Xf78J510UtZ/pgIA0FdUkAAAkGpz586N8ePHx+zZsyMi19rn8MMPj6uuumqtKoWIiJ/+9KcxduzYGDduXGyzzTZx++23xxlnnBGnnXZaUZ971FFHxTPPPBMPPPBAy7Gr9lo33XRTvPbaa3HkkUe23HfkkUfGI488UlDrph122CEaGhpaZovMmzcvBgwYENtuu20MGzYs3vnOd7a02UqOyfyRX//61zFy5Mh43/ve16aiYeutt45hw4bFnXfeGRG5qovFixfHkUce2eZ5/fr1i+22267lea3deeedsddee8Xuu+8e1157bTQ2Nnb5c+yxxx4xadKkNm3Q/v73v8ejjz7aZoZKRwYPHhz3339/fOYzn4mIXAuqj370ozFx4sQ45ZRToqmpqc1zEytWrIhXX3013vve90ZEtFQ8dKSU30FHzjrrrLj11lvbfE2YMCHWrFkTt9xySxx00EExffr0ludPnDgxjjrqqLj33ntjyZIlbd7r+OOPj379+hW9xkWLFsXdd98dH/nIR2KDDTZo856tW1+1/l2tWrUqXnvttZg5c2aMGjWqze9q1KhR8dhjj8XTTz9d0O8AAAB6W90EJHfffXcccMABMWnSpMhkMnH99dcX9fqzzz67TZ/b5MsAQwCA+rVmzZq46qqrYvbs2TF//vx45pln4plnnontttsu/v3vf8ftt9++1msOPPDAuPXWW+PGG29s2UMuX768pRVVobbccsvYZJNN4oorroi5c+fGhAkTYrfdduv0+b/85S9j2rRp0djY2LLOGTNmxJAhQwqamTJq1KjYbLPN2oQgW265ZcvJ7R122KHNYwMHDoz3vOc9ERHx9NNPx5tvvhnjxo2LsWPHtvlatmxZvPLKKy3Pi4jYbbfd1nreLbfc0vK8xIoVK2K//faLLbfcMq6++uoYOHBgtz9HQ0NDHH300XH99de3tG+aO3duDBo0KA499NBuXz9y5Mg4//zz47nnnovnnnsufvrTn8bGG28cF154YXzlK19ped7rr78en/jEJ2L8+PExePDgGDt2bEybNi0icm3VOlPs76AzW2yxReyxxx5tvgYNGhSLFi2K5cuXx8Ybb7zWazbddNNobm6OF154oc39ybqLXeOzzz4bEdEyh6Yzb7/9dpx11lkxefLkaGxsjHXXXTfGjh0bixcvbvO7+vKXvxyLFy+OjTbaKLbYYov4zGc+E48++mhBvw8AAOgN/Su9gHJ566234l3veld85CMfiYMPPrjo159++unxsY99rM19u+++e2y77bblWiIAAFXmjjvuiIULF8ZVV10VV1111VqPz507N/bcc882962//vqxxx57RETEvvvuG+uuu26cfPLJMXv27KL3oUcddVRcdNFFMXz48Dj88MM7DVmWLFkS/+///b9YsWJFbLjhhms9fsUVV8TXvva1bgdaz5o1Ky6++OJYvHhxy/yRxA477BA/+9nPYtWqVXHvvffG1ltvHYMGDYqI3ID2cePGdRrEjB07tuV5Ebn5ERMmTFjref37t/3Pj8bGxth3333jt7/9bfz+97+P/fffv8v1Jz784Q/HN7/5zbj++uvjyCOPjCuuuCL233//GDlyZEGvT0yZMiU+8pGPxJw5c2L69Okxd+7c+OpXvxoREYcddljcd9998ZnPfCbe/e53x7Bhw6K5uTn23nvvlp+zI8X+DvpC6wqPiPKv8ZRTTolLL700PvnJT8b2228fI0eOjEwmE0cccUSb39XOO+8c//znP+O3v/1t3HLLLXHJJZfEd7/73bj44ovjv/7rv0r4yQAAoGfqJiDZZ599Yp999un08aampvjCF74QV155ZSxevDg233zz+MY3vhG77rprROQGPrYeBPnII4/E448/HhdffHFvLx0AgAqZO3dujBs3Ln74wx+u9di1114b1113XVx88cVrnWBu7YQTTojvfve78T//8z8xZ86cbkOK1o466qg466yzYuHChV0Oo7722mtjxYoVcdFFF8W6667b5rGnnnoq/ud//ifmzZvX0hKrM7NmzYqLLroobrvttnjooYdaWk1F5AKSt99+O2688cZ49tln4wMf+EDLYzNmzIjbbrstdtxxxy5/FzNmzIiIiHHjxrWESF3JZDIxd+7cOPDAA+PQQw+Nm266qWV/3pXNN988ttxyy5g7d26sv/768fzzz8cPfvCDbl/XmdGjR8eMGTPi73//e0REvPHGG3H77bfHOeecE2eddVbL8wppDVXs76BYY8eOjSFDhsRTTz211mNPPvlkNDQ0xOTJk8uyxqSFV/J76cxvfvObOOaYY+Lb3/52y30rVqyIxYsXr/XcddZZJ4477rg47rjjYtmyZbHzzjvH2Wef3RKQFPP/HwAA6Km6abHVnZNPPjn++Mc/xlVXXRWPPvpoHHroobH33nt3+h85l1xySWy00Uax00479fFKAQDoC2+//XZce+21sf/++8chhxyy1tfJJ58cS5cujRtuuKHL9+nfv398+tOfjieeeCJ++9vfFrWGGTNmxAUXXBDnnXdeSzurjvzyl7+M6dOnx8c+9rG11nn66afHsGHDCmqzlQQo3/nOd2LVqlVtKkimTp0aEydOjPPPP7/NcyNy1RRr1qxp04IqsXr16pYT4XvttVeMGDEizj333Fi1atVaz120aNFa9w0cODCuvfba2HbbbeOAAw6IP//5z93+HBERH/rQh+KWW26JCy64IMaMGdPlxVKJRx55JF599dW17l+wYEE8/vjjLW2rknkd2Wy2zfMuuOCCbj+jlN9BMfr16xd77rln/Pa3v43nnnuu5f5///vfccUVV8SsWbNixIgRZVnj2LFjY+edd46f/exn8fzzz7d5TuvfTb9+/db6Xf3gBz9Ya4bPa6+91ub7YcOGxcyZM9vMfklaHHcUrgAAQLnVTQVJV55//vm49NJL4/nnn49JkyZFRK6l1u9///u49NJL49xzz23z/BUrVsTcuXPjc5/7XCWWCwBAH7jhhhti6dKl8f73v7/Dx9/73vfG2LFjY+7cuXH44Yd3+V7HHntsnHXWWfGNb3wjDjrooKLW8YlPfKLLx19++eW4884749RTT+3w8cbGxthrr73i17/+dXz/+9+PAQMGdPpeG2ywQUyePDn++Mc/xtSpU1v2xokddtghrrnmmshkMrHjjju23L/LLrvECSecEOedd148/PDDseeee8aAAQPi6aefjl//+tfxve99Lw455JAYMWJEXHTRRfGhD30ottpqqzjiiCNi7Nix8fzzz8eNN94YO+64Y1x44YVrrWvw4MHxf//3f7HbbrvFPvvsE3/4wx+6nXtx1FFHxRlnnBHXXXddfPzjH+/y507ceuut8aUvfSne//73x3vf+94YNmxYPPvss/Gzn/0smpqa4uyzz46IiBEjRsTOO+8c559/fqxatSrWW2+9uOWWW2L+/Pndfkapv4NifPWrX41bb701Zs2aFSeeeGL0798/fvzjH0dTU1NLwFWuNX7/+9+PWbNmxVZbbRX//d//HdOmTYvnnnsubrzxxnj44YcjImL//fePX/ziFzFy5Mh4xzveEX/84x/jtttuizFjxrT53He84x2x6667xtZbbx3rrLNOPPjgg/Gb3/wmTj755JbnbL311hERceqpp8Zee+0V/fr1iyOOOKJHvy8AAOhMKgKSv/3tb7FmzZrYaKON2tzf1NS01qY9IuK6666LpUuXxjHHHNNXSwQAoI8lg73f9773dfh4Q0ND7LfffjF37tx47bXXOtw3JgYPHhwnn3xynH322XHXXXcV1CaqUFdddVU0NzfHAQcc0OlzDjjggLjmmmvipptu6jTwScyaNSuuvPLKNtUjiR133DGuueaa2GSTTdb6eS+++OLYeuut48c//nF8/vOfj/79+8fUqVPjgx/8YJsw5aijjopJkybF17/+9fjmN78ZTU1Nsd5668VOO+0Uxx13XKfrGjFiRNx8882x8847x/ve97645557YubMmZ0+f/z48bHnnnvG7373u/jQhz7U5c+c+MAHPhBLly6NW265Je644454/fXXY/To0fGe97wnPv3pT8fs2bNbnnvFFVfEKaecEj/84Q8jm83GnnvuGTfddNNaoVJHSv0dFGqzzTaLe+65J84888w477zzorm5Obbbbrv45S9/Gdttt11B71HoGt/1rnfFn/70p/jiF78YF110UaxYsSKmTJkShx12WMtzvve970W/fv1i7ty5sWLFithxxx3jtttui7322qvNZ5566qlxww03xC233BJNTU0xZcqU+OpXv9qm1dvBBx8cp5xySlx11VXxy1/+MrLZrIAEAIBek8m2r4WuA5lMJq677rqWq/d+9atfxdFHHx2PPfZYS7l8YtiwYWsNJtx9991jxIgRcd111/XVkgEAgCLNmTMn/va3v8UzzzxT6aUAAAA1KBUVJFtuuWWsWbMmXnnllW5nisyfPz/uvPPObntNAwAAlbNw4cK48cYb4wtf+EKllwIAANSouglIli1b1ubKsfnz58fDDz8c66yzTmy00UZx9NFHx4c//OH49re/HVtuuWUsWrQobr/99njnO98Z++23X8vrfvazn8XEiRMLGvIIAAD0rfnz58e8efPikksuiQEDBsQJJ5xQ6SUBAAA1qm4CkgcffLBNz+DTTjstIiKOOeaYuOyyy+LSSy+Nr371q/HpT386XnrppVh33XXjve99b+y///4tr2lubo7LLrssjj322LVacQEAAJX3hz/8IY477rjYYIMN4uc///la7XIBAAAKVZczSAAAAAAAALrSUOkFAAAAAAAA9DUBCQAAAAAAkDo1PYOkubk5Xn755Rg+fHhkMplKLwcAAAAAAKigbDYbS5cujUmTJkVDQ9c1IjUdkLz88ssxefLkSi8DAAAAAACoIi+88EKsv/76XT6npgOS4cOHR0TuBx0xYkSFVwMAAAAAAFTSkiVLYvLkyS35QVdqOiBJ2mqNGDFCQAIAAAAAAEREFDSWw5B2AAAAAAAgdQQkAAAAAABA6ghIAAAAAACA1KnpGSQAAAAAANCVbDYbq1evjjVr1lR6KZTJgAEDol+/fj1+HwEJAAAAAAB1aeXKlbFw4cJYvnx5pZdCGWUymVh//fVj2LBhPXofAQkAAAAAAHWnubk55s+fH/369YtJkybFwIEDI5PJVHpZ9FA2m41FixbFiy++GBtuuGGPKkkEJAAAAAAA1J2VK1dGc3NzTJ48OYYMGVLp5VBGY8eOjeeeey5WrVrVo4DEkHYAAAAAAOpWQ4PT4PWmXJVA/pcBAAAAAACkjoAEAAAAAABIHQEJAAAAAADUualTp8YFF1xQ8PPvuuuuyGQysXjx4l5bU6UJSAAAAAAAoEpkMpkuv84+++yS3veBBx6I//7v/y74+TvssEMsXLgwRo4cWdLn1YL+lV4AAAAAAACQs3Dhwpbbv/rVr+Kss86Kp556quW+YcOGtdzOZrOxZs2a6N+/+1P9Y8eOLWodAwcOjAkTJhT1mlqjggQAAAAAgFTIZiPeeqsyX9lsYWucMGFCy9fIkSMjk8m0fP/kk0/G8OHD46abboqtt946Ghsb4957741//vOfceCBB8b48eNj2LBhse2228Ztt93W5n3bt9jKZDJxySWXxJw5c2LIkCGx4YYbxg033NDyePsWW5dddlmMGjUqbr755th0001j2LBhsffee7cJdFavXh2nnnpqjBo1KsaMGROf/exn45hjjomDDjqo1H9kvUpAAgAAAABAKixfHjFsWGW+li8v38/xuc99Lr7+9a/HE088Ee985ztj2bJlse+++8btt98eDz30UOy9995xwAEHxPPPP9/l+5xzzjlx2GGHxaOPPhr77rtvHH300fH666938ftbHt/61rfiF7/4Rdx9993x/PPPx+mnn97y+De+8Y2YO3duXHrppTFv3rxYsmRJXH/99eX6sctOQAIAAAAAADXky1/+crzvfe+LGTNmxDrrrBPvete74oQTTojNN988Ntxww/jKV74SM2bMaFMR0pFjjz02jjzyyJg5c2ace+65sWzZsvjzn//c6fNXrVoVF198cWyzzTax1VZbxcknnxy33357y+M/+MEP4swzz4w5c+bEJptsEhdeeGGMGjWqXD922ZlBAgAAAABAKgwZErFsWeU+u1y22WabNt8vW7Yszj777Ljxxhtj4cKFsXr16nj77be7rSB55zvf2XJ76NChMWLEiHjllVc6ff6QIUNixowZLd9PnDix5flvvvlm/Pvf/473vOc9LY/369cvtt5662hubi7q5+srAhIAAAAAAFIhk4kYOrTSq+i5oe1+iNNPPz1uvfXW+Na3vhUzZ86MwYMHxyGHHBIrV67s8n0GDBjQ5vtMJtNlmNHR87OFDlepQlpsAQAAAABADZs3b14ce+yxMWfOnNhiiy1iwoQJ8dxzz/XpGkaOHBnjx4+PBx54oOW+NWvWxF//+tc+XUcxVJAAAAAAAEAN23DDDePaa6+NAw44IDKZTHzxi1+sSFurU045Jc4777yYOXNmbLLJJvGDH/wg3njjjchkMn2+lkKoIAEAAAAAgBr2ne98J0aPHh077LBDHHDAAbHXXnvFVltt1efr+OxnPxtHHnlkfPjDH47tt98+hg0bFnvttVcMGjSoz9dSiEy2hhuELVmyJEaOHBlvvvlmjBgxotLLAQAAAACgSqxYsSLmz58f06ZNq9oT9PWuubk5Nt100zjssMPiK1/5Stnet6t/tsXkBlpsAQAAAAAAPbZgwYK45ZZbYpdddommpqa48MILY/78+XHUUUdVemkd0mILAAAAAADosYaGhrjsssti2223jR133DH+9re/xW233RabbrpppZfWIRUkAAAAAABAj02ePDnmzZtX6WUUTAUJAAAAAACQOgISAAAAAAAgdQQkAAAAAABA6ghIAAAAAACA1BGQAAAAAAAAqSMgAQBS4/XXIx5+uNKrAAAAAKqBgAQASI0jjojYcsuIp56q9EoAAACgOpx99tnx7ne/u9LLqAgBCQCQGvPn544vvFDZdQAAAEBnMplMl19nn312j977+uuvb3Pf6aefHrfffnvPFl2j+ld6AQAAfWXFitxxzZrKrgMAAAA6s3Dhwpbbv/rVr+Kss86Kp1q1Qhg2bFhZP2/YsGFlf89aoYIEAEiNJCBZvbqy6wAAAKBCstmIt96qzFc2W9ASJ0yY0PI1cuTIyGQybe676qqrYtNNN41BgwbFJptsEj/60Y9aXrty5co4+eSTY+LEiTFo0KCYMmVKnHfeeRERMXXq1IiImDNnTmQymZbv27fYOvbYY+Oggw6Kb33rWzFx4sQYM2ZMnHTSSbFq1aqW5yxcuDD222+/GDx4cEybNi2uuOKKmDp1alxwwQU9+sfT11SQAACp0dSUOwpIAAAAUmr58ohKVUssWxYxdGiP3mLu3Llx1llnxYUXXhhbbrllPPTQQ3H88cfH0KFD45hjjonvf//7ccMNN8TVV18dG2ywQbzwwgvxwn/6TD/wwAMxbty4uPTSS2PvvfeOfv36dfo5d955Z0ycODHuvPPOeOaZZ+Lwww+Pd7/73XH88cdHRMSHP/zhePXVV+Ouu+6KAQMGxGmnnRavvPJKj362ShCQAACpocUWAAAAtexLX/pSfPvb346DDz44IiKmTZsWjz/+ePz4xz+OY445Jp5//vnYcMMNY9asWZHJZGLKlCktrx07dmxERIwaNSomTJjQ5eeMHj06LrzwwujXr19ssskmsd9++8Xtt98exx9/fDz55JNx2223xQMPPBDbbLNNRERccsklseGGG/bST917BCQAQCqsWRORVAOrIAEAAEipIUNylRyV+uweeOutt+Kf//xnfPSjH22p5IiIWL16dYwcOTIicu2x3ve+98XGG28ce++9d+y///6x5557Fv1Zm222WZsKk4kTJ8bf/va3iIh46qmnon///rHVVlu1PD5z5swYPXp0qT9axQhIAIBUSNprRQhIAAAAUiuT6XGbq0pZ9p9g53//939ju+22a/NYEmZstdVWMX/+/Ljpppvitttui8MOOyz22GOP+M1vflPUZw0YMKDN95lMJpqbm3uw+uokIAEAUiFprxUhIAEAAKD2jB8/PiZNmhTPPvtsHH300Z0+b8SIEXH44YfH4YcfHoccckjsvffe8frrr8c666wTAwYMiDU97Du98cYbx+rVq+Ohhx6KrbfeOiIinnnmmXjjjTd69L6VICABAFKhdUBiBgkAAAC16JxzzolTTz01Ro4cGXvvvXc0NTXFgw8+GG+88Uacdtpp8Z3vfCcmTpwYW265ZTQ0NMSvf/3rmDBhQowaNSoiIqZOnRq333577LjjjtHY2FhSW6xNNtkk9thjj/jv//7vuOiii2LAgAHx6U9/OgYPHhyZTKbMP3Hvaqj0AgAA+oIKEgAAAGrdf/3Xf8Ull1wSl156aWyxxRaxyy67xGWXXRbTpk2LiIjhw4fH+eefH9tss01su+228dxzz8Xvfve7aGjIRQHf/va349Zbb43JkyfHlltuWfI6Lr/88hg/fnzsvPPOMWfOnDj++ONj+PDhMWjQoLL8nH0lk81ms5VeRKmWLFkSI0eOjDfffDNGjBhR6eUAAFXsiSci3vGO3O0f/Sji4x+v7HoAAADoXStWrIj58+fHtGnTau7Efa158cUXY/LkyXHbbbfF7rvv3uuf19U/22JyAy22AIBU0GILAAAAyuOOO+6IZcuWxRZbbBELFy6MM844I6ZOnRo777xzpZdWlIq22FqzZk188YtfjGnTpsXgwYNjxowZ8ZWvfCVquKgFAKhSWmwBAABAeaxatSo+//nPx2abbRZz5syJsWPHxl133RUDBgyo9NKKUtEKkm984xtx0UUXxc9//vPYbLPN4sEHH4zjjjsuRo4cGaeeemollwYA1BkBCQAAAJTHXnvtFXvttVell9FjFQ1I7rvvvjjwwANjv/32i4iIqVOnxpVXXhl//vOfO3x+U1NTNDU1tXy/ZMmSPlknAFD7tNgCAAAAWqtoi60ddtghbr/99vjHP/4RERGPPPJI3HvvvbHPPvt0+PzzzjsvRo4c2fI1efLkvlwuAFDDVJAAAAAArVW0guRzn/tcLFmyJDbZZJPo169frFmzJr72ta/F0Ucf3eHzzzzzzDjttNNavl+yZImQBAAoSKsiVAEJAAAAUNmA5Oqrr465c+fGFVdcEZtttlk8/PDD8clPfjImTZoUxxxzzFrPb2xsjMbGxgqsFACodSpIAAAAgNYqGpB85jOfic997nNxxBFHRETEFltsEQsWLIjzzjuvw4AEAKBUZpAAAAAArVV0Bsny5cujoaHtEvr16xfNzc0VWhEAUK9UkAAAAACtVTQgOeCAA+JrX/ta3HjjjfHcc8/FddddF9/5zndizpw5lVwWAFCHBCQAAADQ1rHHHhsHHXRQy/e77rprfPKTn+zRe5bjPfpKRVts/eAHP4gvfvGLceKJJ8Yrr7wSkyZNihNOOCHOOuusSi4LAKhDWmwBAABQK4499tj4+c9/HhERAwYMiA022CA+/OEPx+c///no37/3Tutfe+21MWDAgIKee9ddd8Xs2bPjjTfeiFGjRpX0HpVW0YBk+PDhccEFF8QFF1xQyWUAACmgggQAAIBasvfee8ell14aTU1N8bvf/S5OOumkGDBgQJx55pltnrdy5coYOHBgWT5znXXWqYr36CsVbbEFANBXmprytwUkAAAAKZXNRqx+qzJf2WxRS21sbIwJEybElClT4uMf/3jsscceccMNN7S0xfra174WkyZNio033jgiIl544YU47LDDYtSoUbHOOuvEgQceGM8991zL+61ZsyZOO+20GDVqVIwZMybOOOOMyLZbU/v2WE1NTfHZz342Jk+eHI2NjTFz5sz46U9/Gs8991zMnj07IiJGjx4dmUwmjj322A7f44033ogPf/jDMXr06BgyZEjss88+8fTTT7c8ftlll8WoUaPi5ptvjk033TSGDRsWe++9dyxcuLCo31cpKlpBAgDQV7TYAgAAINYsj7h6WGU++7BlEf2HlvzywYMHx2uvvRYREbfffnuMGDEibr311oiIWLVqVey1116x/fbbxz333BP9+/ePr371q7H33nvHo48+GgMHDoxvf/vbcdlll8XPfvaz2HTTTePb3/52XHfddbHbbrt1+pkf/vCH449//GN8//vfj3e9610xf/78ePXVV2Py5MlxzTXXxAc+8IF46qmnYsSIETF48OAO3+PYY4+Np59+Om644YYYMWJEfPazn4199903Hn/88ZZWXMuXL49vfetb8Ytf/CIaGhrigx/8YJx++ukxd+7ckn9fhRCQAACpoMUWAAAAtSibzcbtt98eN998c5xyyimxaNGiGDp0aFxyySUtrbV++ctfRnNzc1xyySWRyWQiIuLSSy+NUaNGxV133RV77rlnXHDBBXHmmWfGwQcfHBERF198cdx8882dfu4//vGPuPrqq+PWW2+NPfbYIyIipk+f3vJ40kpr3LhxbWaQtJYEI/PmzYsddtghIiLmzp0bkydPjuuvvz4OPfTQiMgFPBdffHHMmDEjIiJOPvnk+PKXv1zqr6xgAhIAIBUEJAAAAES/IblKjkp9dhH+7//+L4YNGxarVq2K5ubmOOqoo+Lss8+Ok046KbbYYos2c0ceeeSReOaZZ2L48OFt3mPFihXxz3/+M958881YuHBhbLfddi2P9e/fP7bZZpu12mwlHn744ejXr1/ssssuRa27tSeeeCL69+/f5nPHjBkTG2+8cTzxxBMt9w0ZMqQlHImImDhxYrzyyislf26hBCQAQCoISAAAAIhMpkdtrvrS7Nmz46KLLoqBAwfGpEmTon///On8oUPb/gzLli2LrbfeusOWVGPHji3p8ztrmdUbklZbiUwm02lwU06GtAMAqWAGCQAAALVk6NChMXPmzNhggw3ahCMd2WqrreLpp5+OcePGxcyZM9t8jRw5MkaOHBkTJ06M+++/v+U1q1evjr/85S+dvucWW2wRzc3N8Yc//KHDx5MKljVd/Ef2pptuGqtXr27zua+99lo89dRT8Y53vKPLn6kvCEgAgFRQQQIAAEC9Ovro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Q0M+bIjo/SHt2awWWwBQNTob0t6vXz58qIWAxIYAAFJFQAIA9Ejr8yGZTP7+3q4gWbo0/95abAFAhSVXTHTU3iq5L3lOb1FBAgAUqVcDkilTpsSAZJMBANSlzi4Y7e0KkqS91vDhEUOHlv4+AhIAKIPONgQRfTOYrPX7C0gAgAKVFJAcc8wxcffdd3f7vL///e8xefLkUj4CAKgR3QUka9b0zrmGcrTXijCDBADKorMh7RECEgCgapUUkLz55puxxx57xIYbbhjnnntuvPTSSyUv4KWXXooPfvCDMWbMmBg8eHBsscUW8eCDD5b8fgBA3+qso0bSYiuid6pIyjGgPcIMEgAoi86GtEcISACAqlVSQHL99dfHSy+9FB//+MfjV7/6VUydOjX22Wef+M1vfhOrithMvPHGG7HjjjvGgAED4qabborHH388vv3tb8fo0aNLWRYAUAGdVZC0nknSG+dDkoCkXBUkAhIA6IGuKkj6agZJV3NQupNsCAQkAJAqJc8gGTt2bJx22mnxyCOPxP333x8zZ86MD33oQzFp0qT41Kc+FU8//XS37/GNb3wjJk+eHJdeemm85z3viWnTpsWee+4ZM2bMKHVZAEAf6ywgyWR694JRLbYAoIpUQwVJUrKqggQAKFCPh7QvXLgwbr311rj11lujX79+se+++8bf/va3eMc73hHf/e53u3ztDTfcENtss00ceuihMW7cuNhyyy3jf//3fzt9flNTUyxZsqTNFwBQWYXMZNViCwDqXDXMIHnxxdyxlM1BEpDYEABAqpQUkKxatSquueaa2H///WPKlCnx61//Oj75yU/Gyy+/HD//+c/jtttui6uvvjq+/OUvd/k+zz77bFx00UWx4YYbxs033xwf//jH49RTT42f//znHT7/vPPOi5EjR7Z8GQAPAJXXVTeLWqogcT4EAHqgqwqSvmix1dwcsWBB7va0acW/XgUJAKRS/1JeNHHixGhubo4jjzwy/vznP8e73/3utZ4ze/bsGDVqVJfv09zcHNtss02ce+65ERGx5ZZbxt///ve4+OKL45hjjlnr+WeeeWacdtppLd8vWbJESAIAFdZVBUkyqL03K0gEJABQBQopKe3NCpKXX45YuTL3h3399Yt/vYAEAFKppIDku9/9bhx66KExqIvBZ6NGjYr58+d3+T4TJ06Md7zjHW3u23TT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Tz31VOy8885r3T9y5MhYvHhxT9cEANSI1gFJZxduJudDytFiq9wD2iO02AKAHkuqQrqbQRIhIAEAqkpJAcmECRPimWeeWev+e++9N6aXYzAaAFATkvMhAwfm2n93pJznQ5IKEgEJAFSRSlWQPPts7iggAQBKVFJAcvzxx8cnPvGJuP/++yOTycTLL78cc+fOjdNPPz0+/vGPl3uNAECVKqTleNJiqxwVJElAMnFiz98rYQYJAPRQIRUkvTmDpFwBSbIpEJAAQGr0L+bJ8+fPj2nTpsXnPve5aG5ujt133z2WL18eO++8czQ2Nsbpp58ep5xySm+tFQCoMn19wWhvtNgygwQAeqjSM0jK1clCBQkApE5RAcmMGTNiypQpMXv27Jg9e3Y88cQTsXTp0li2bFm84x3viGHDhvXWOgGAKlTI+ZBaqSARkABAiZKqkL4MSFavjnj++dztcrfYsikAgNQoKiC544474q677oq77rorrrzyyli5cmVMnz49dtttt9htt91i1113jfHjx/fWWgGAKtPX50N6cwaJFlsAUKJCem4mj5UrIHnxxdwf78bG8l05oYIEAFKnqIBk1113jV133TUiIlasWBH33XdfS2Dy85//PFatWhWbbLJJPPbYY72xVgCgyhQzg0SLLQCoU8W02CrXDJKkvdaUKRENJY1XXZuABABSp6iApLVBgwbFbrvtFrNmzYrZs2fHTTfdFD/+8Y/jySefLOf6AIAqVsz5kJ622MpmtdgCgKpUyJD2crfYevbZ3LFc7bUiBCQAkEJFByQrV66MP/3pT3HnnXfGXXfdFffff39Mnjw5dt5557jwwgtjl1126Y11AgBVqC9nsi5blg9ZytnRU4stAOihSgxpTypIyhmQJJsCAQkApEZRAcluu+0W999/f0ybNi122WWXOOGEE+KKK66IieW8jBMAqBmFzCAp15D2pL3WsGG5r3LRYgsAeqiQCpLksXK32Jo+vTzvF6GCBABSqKiA5J577omJEye2DGTfZZddYsyYMb21NgCgyhUyg6RcF4z2RnutCC22AKDH6qWCREACAKlT1CSzxYsXx09+8pMYMmRIfOMb34hJkybFFltsESeffHL85je/iUWLFvXWOgGAKlTI+ZByV5CUc0B7hIAEAHqsEjNIejMgsSkAgNQoqoJk6NChsffee8fee+8dERFLly6N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i2qxBQDdKPdAsoiIiRNLf69ySwKSNF41sXp1xD335AKR666LeOml/GONjRGbb54b2Pnss5VbY6UtXZrfMHYXkLz6ai5oatDApS61nj+SmDw5F5C88ELEO99ZkWUBxal4GtG/f/+YUE1XipBqrStIInJttgQk5fXPf0YsXJi7/Ze/RCxZEjFiRGXXBBSudUBSjotGq6W9VkR+Bkkaz4UAQFGSFls92Qz075/745ucaK6m8wJprCBZujTijDMifv3rfPuoiIhhw3IttQ4+OGKffXKBySab5AKStM5YSKpHBg1aO+hLrLtu7rhmTcQbb3Teiova1rqCJDF5csTDDxvUDjWk4hH2008/HZMmTYrp06fH0UcfHc8//3ynz21qaoolS5a0+YJyah+Q/PWvlVlHPbv77vzt5uaIefMqtxageElA0r9/zy6Ea11BUi202AKAApWjgiSi7cllAUllXXNNxMUX58KRMWMiPvKRiP/7v4hFiyKuvDLi0ENzYcmUKblQ5K23ctURadRde62IiIEDI0aPzt3WZqt+dRaQRAhIoIZUNCDZbrvt4rLLLovf//73cdFFF8X8+fNjp512iqVLl3b4/PPOOy9GjhzZ8jU5+ZcOlEkSkGy5Ze5oUHv53XNP7picWNVmC2pLOS4YjajOChIttgCgQOXeEEQISCrtiSdyxw99KPcfxj/9acR++60dgg0aFLHeernbaW2z1d2A9oQ5JPVPQAJ1oaIByT777BOHHnpovPOd74y99torfve738XixYvj6quv7vD5Z555Zrz55pstXy/4lw1llgQk++yTOz78cH4YMeWRVJAcfnjumMwjAWpDuS4Y3Wqr3HHHHXv2PuWkxRYAFKgcQ9oj2gYk1TSDJLlqIk0ByT/+kTtuu23+5+/M9Om5Y1oDkkIqSCIixo7NHQUk9SsJSKZNy9+3wQa5o3OWUDMq3mKrtVGjRsVGG20UzzzzTIePNzY2xogRI9p8sbZsNuKPf4z4058qvZLakwQku+2Wu2ho8eL83zt67qWXcnvohoaIz38+d9+DD+ba3QK1oVznQ049NXfx3Qc+0PM1lYsWWwBQoKSCpKdXTLR+vQqSykoCko037v65ApLcsbuARAVJfVuxIuLll3O3VZBATauqgGTZsmXxz3/+MyZW05UjNejCCyN22CHizDMrvZLa8+9/544bbBCx+ea5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GgBg7969Lh8JERERERERERERERG5TcULVPygNHEdINm3bx8AoH79+i4fCRERERERERERERERecW+fftQqVKlUm8T0oyEUTyqsLAQmzdvRoUKFRAKhSx5zL1796J+/frYuHEjKlasaMljElmN5ynFK567FG94zlI84HlK8YjnLcUbnrMUT3i+UjzieUtW0jQN+/btQ506dZCQUHqXkbjOIElISEC9evVseeyKFSvyxUiex/OU4hXPXYo3PGcpHvA8pXjE85biDc9Ziic8Xyke8bwlq5SVOaKwSTsREREREREREREREQUOAyRERERERERERERERBQ4DJAUk5qaiuHDhyM1NdXtQyEqEc9Tilc8dyne8JyleMDzlOIRz1uKNzxnKZ7wfKV4xPOW3BLXTdqJiIiIiIiIiIiIiIiiwQwSIiIiIiIiIiIiIiIKHAZIiIiIiIiIiIiIiIgocBggISIiIiIiIiIiIiKiwGGAhIiIiIiIiIiIiIiIAicuAiQjR47EscceiwoVKqBGjRro168fVq5cWeQ2ubm5GDhwIKpWrYry5cvjggsuwLZt24rc5o477kCnTp2QmpqKDh06RHyuJUuW4OSTT0ZaWhrq16+P0aNHGzrGsWPHolGjRkhLS0OXLl3wyy+/FPn+G2+8gW7duqFixYoIhULIysoy/PNTfPDDedqtWzeEQqEi/26++WbjvwSKS344d9euXYvzzjsP1atXR8WKFXHxxRcfcXzkH06ds7m5ubjmmmvQtm1bJCUloV+/foaP8bPPPkOLFi2QlpaGtm3bYtKkSUW+/+WXX6JXr16oWrUqQqEQFi9ebPixKT744Ty95pprjhgX9OnTx/DjU/zxw3m7bds2XHPNNahTpw7S09PRp08frF692vDjU3xx6pydPXs2zj33XNSuXRsZGRno0KEDxo0bZ+gYOVdAih/OV84ZBI8fzlvOF1BZ4iJAMmfOHAwcOBALFizAtGnTkJeXh169euHAgQP/3ebOO+/Et99+i88++wxz5szB5s2bcf755x/xWNdeey0uueSSiM+zd+9e9OrVCw0bNsTChQvx9NNP45FHHsEbb7xR6vF9+umnuOuuuzB8+HD8/vvvaN++PXr37o3t27f/d5ucnBz06dMH999/f5S/BfI6P5ynAHDDDTdgy5Yt//0zOoFN8Svez90DBw6gV69eCIVCmDlzJn788UccPnwYZ599NgoLC2P4zZBXOXXOFhQUoFy5crjjjjvQs2dPw8f3008/oX///rjuuuuwaNEi9OvXD/369cOyZcv+u82BAwdw0kknYdSoUSZ+coonfjhPAaBPnz5FxgUff/yx4eeg+BPv562maejXrx/+/vtvTJgwAYsWLULDhg3Rs2fPIj8D+YdT5+xPP/2Edu3a4YsvvsCSJUswYMAAXHXVVZg4cWKpx8e5Agrnh/MV4JxB0MT7ecv5AjJEi0Pbt2/XAGhz5szRNE3TsrKytOTkZO2zzz777zbLly/XAGjz588/4v7Dhw/X2rdvf8TXX3nlFS0zM1M7dOjQf18bOnSo1rx581KP57jjjtMGDhz43/8LCgq0OnXqaCNHjjzitrNmzdIAaHv27Cnrx6Q4F4/n6amnnqoNGjTI6I9IPhVv5+7UqVO1hIQELTs7+7/bZGVlaaFQSJs2bZqxH5riml3nbLirr75aO/fccw0dz8UXX6z17du3yNe6dOmi3XTTTUfcdt26dRoAbdGiRYYem+JXPJ6nZh6P/CneztuVK1dqALRly5b99/2CggKtevXq2ptvvmnoOSi+OXHOKmeeeaY2YMCAUm/DuQIqTTyer5wzoHg7bzlfQEbERQZJcdnZ2QCAKlWqAAAWLlyIvLy8IquPWrRogQYNGmD+/PmGH3f+/Pk45ZRTkJKS8t/XevfujZUrV2LPnj0R73P48GEsXLiwyHMnJCSgZ8+epp6b/Cdez9Nx48ahWrVqaNOmDYYNG4acnBzDx0b+EG/n7qFDhxAKhZCamvrfbdLS0pCQkIB58+YZPj6KX3ads9GaP3/+ESuie/fuzXFBwMXreTp79mzUqFEDzZs3xy233IJdu3bZfmzkHfF23h46dAiAjAOUhIQEpKamckwQEE6es9nZ2f89TyScK6CyxOv5yjmDYIu385bzBWRE3AVICgsLMXjwYJx44olo06YNAGDr1q1ISUlB5cqVi9y2Zs2a2Lp1q+HH3rp1K2rWrHnEY6jvRbJz504UFBREvJ+Z5yZ/idfz9LLLLsP//vc/zJo1C8OGDcOHH36IK664wvCxUfyLx3P3+OOPR0ZGBoYOHYqcnBwcOHAAd999NwoKCrBlyxbDx0fxyc5zNlolnescFwRXvJ6nffr0wQcffIAZM2Zg1KhRmDNnDs444wwUFBTYfnzkvng8b9WEzLBhw7Bnzx4cPnwYo0aNwqZNmzgmCAAnz9nx48fj119/xYABA0q8DecKqDTxer5yziDY4vG85XwBGRF3AZKBAwdi2bJl+OSTTxx/7h9++AHly5f/75/RZkEUPPF6nt54443o3bs32rZti8svvxwffPABvvrqK6xdu9bGIyYvicdzt3r16vjss8/w7bffonz58qhUqRKysrLQsWNHJCTE3cccmeTmObthw4Yi5+yTTz7p+DFQfIjX8/TSSy/FOeecg7Zt26Jfv36YOHEifv31V8yePdu+AybPiMfzNjk5GV9++SVWrVqFKlWqID09HbNmzcIZZ5zBMUEAOHXOzpo1CwMGDMCbb76J1q1bA+BcAZkXr+cr5wyCLR7PW84XkBFJbh+AGbfddhsmTpyIuXPnol69ev99vVatWjh8+DCysrKKRCy3bduGWrVqGX78WrVqYdu2bUW+pv5fq1YtNGrUCIsXL/7vezVr1kRqaioSExMj3s/Mc5N/+Ok87dKlCwBgzZo1aNKkieFjpPgUz+dur169sHbtWuzcuRNJSUmoXLkyatWqhcaNGxs+Poo/dp+zZalTp06Rc1alf5d0rnNcEEx+Ok8bN26MatWqYc2aNejRo4dlx0jeE8/nbadOnbB48WJkZ2fj8OHDqF69Orp06YLOnTtbdnzkPU6ds3PmzMHZZ5+N559/HlddddV/X+/cuTPnCsgwP52vnDMIjng+bzlfQGWJi1CZpmm47bbb8NVXX2HmzJk46qijiny/U6dOSE5OxowZM/772sqVK7FhwwZ07drV8PN07doVc+fORV5e3n9fmzZtGpo3b47MzEyUK1cOTZs2/e9fhQoVkJKSgk6dOhV57sLCQsyYMcPUc1P88+N5qj58ateubfj4KP746dytVq0aKleujJkzZ2L79u0455xzzPwqKE44dc6WJSkpqcg5qybwunbtWuS5ATnXOS4IFj+ep5s2bcKuXbs4LvAxP523lSpVQvXq1bF69Wr89ttvOPfccy07PvIOJ8/Z2bNno2/fvhg1ahRuvPHGIt/jXAEZ4cfzlXMG/uen85bzBVQi19rDm3DLLbdolSpV0mbPnq1t2bLlv385OTn/3ebmm2/WGjRooM2cOVP77bfftK5du2pdu3Yt8jirV6/WFi1apN10001as2bNtEWLFmmLFi3SDh06pGmapmVlZWk1a9bUrrzySm3ZsmXaJ598oqWnp2uvv/56qcf3ySefaKmpqdp7772n/fXXX9qNN96oVa5cWdu6det/t9myZYu2aNEi7c0339QAaHPnztUWLVqk7dq1y8LfFLkp3s/TNWvWaI899pj222+/aevWrdMmTJigNW7cWDvllFMs/k2R18T7uatpmvbOO+9o8+fP19asWaN9+OGHWpUqVbS77rrLwt8SeYlT56ymadqff/6pLVq0SDv77LO1bt26/Xeb0vz4449aUlKS9swzz2jLly/Xhg8friUnJ2tLly797za7du3SFi1apH333XcaAO2TTz7RFi1apG3ZssWaXxK5Lt7P03379ml33323Nn/+fG3dunXa9OnTtY4dO2pHH320lpuba90vijwl3s9bTdO08ePHa7NmzdLWrl2rff3111rDhg21888/35pfEHmOU+fszJkztfT0dG3YsGFFnqes63nOFVC4eD9fOWcQTPF+3moa5wuobHERIAEQ8d+77777320OHjyo3XrrrVpmZqaWnp6unXfeeUdMMpx66qkRH2fdunX/3eaPP/7QTjrpJC01NVWrW7eu9tRTTxk6xjFjxmgNGjTQUlJStOOOO05bsGBBke8PHz68zJ+B4lu8n6cbNmzQTjnlFK1KlSpaamqq1rRpU+2ee+7RsrOzY/q9kPfF+7mraZo2dOhQrWbNmlpycrJ29NFHa88++6xWWFgY9e+EvM3Jc7Zhw4YRb1OW8ePHa82aNdNSUlK01q1ba999912R77/77rsRH3f48OGx/GrIQ+L9PM3JydF69eqlVa9eXUtOTtYaNmyo3XDDDUUuNsl/4v281TRNe/HFF7V69eppycnJWoMGDbQHH3ywSGCG/MWpc/bqq6+O+P1TTz21zGPkXAEp8X6+cs4gmOL9vNU0zhdQ2UKapmkgIiIiIiIiIiIiIiIKkLjoQUJERERERERERERERGQlBkiIiIiIiIiIiIiIiChwGCAhIiIiIiIiIiIiIqLAYYCEiIiIiIiIiIiIiIgChwESIiIiIiIiIiIiIiIKHAZIiIiIiIiIiIiIiIgocBggISIiIiIiIiIiIiKiwGGAhIiIiIiIiIiIiIiIAocBEiIiIiIiIiIiIiIiChwGSIiIiIiIyDOuueYahEIhhEIhJCcno2bNmjj99NPxzjvvoLCw0PDjvPfee6hcubJ9B0pERERERHGPARIiIiIiIvKUPn36YMuWLVi/fj0mT56M0047DYMGDcJZZ52F/Px8tw+PiIiIiIh8ggESIiIiIiLylNTUVNSqVQt169ZFx44dcf/992PChAmYPHky3nvvPQDAc889h7Zt2yIjIwP169fHrbfeiv379wMAZs+ejQEDBiA7O/u/bJRHHnkEAHDo0CHcfffdqFu3LjIyMtClSxfMnj3bnR+UiIiIiIhcxQAJERERERF5Xvfu3dG+fXt8+eWXAICEhAS89NJL+PPPP/H+++9j5syZuPfeewEAJ5xwAl544QVUrFgRW7ZswZYtW3D33XcDAG677TbMnz8fn3zyCZYsWYKLLroIffr0werVq1372YiIiIiIyB0hTdM0tw+CiIiIiIgIkB4kWVlZ+Prrr4/43qWXXoolS5bgr7/+OuJ7n3/+OW6++Wbs3LkTgPQgGTx4MLKysv67zYYNG9C4cWNs2LABderU+e/rPXv2xHHHHYcnn3zS8p+HiIiIiIi8K8ntAyAiIiIiIjJC0zSEQiEAwPTp0zFy5EisWLECe/fuRX5+PnJzc5GTk4P09PSI91+6dCkKCgrQrFmzIl8/dOgQqlatavvxExERERGRtzBAQkREREREcWH58uU46qijsH79epx11lm45ZZb8MQTT6BKlSqYN28errvuOhw+fLjEAMn+/fuRmJiIhQsXIjExscj3ypcv78SPQEREREREHsIACRERERERed7MmTOxdOlS3HnnnVi4cCEKCwvx7LPPIiFB2iqOHz++yO1TUlJQUFBQ5GvHHHMMCgoKsH37dpx88smOHTsREREREXkTAyREREREROQphw4dwtatW1FQUIBt27ZhypQpGDlyJM466yxcddVVWLZsGfLy8jBmzBicffbZ+PHHH/Haa68VeYxGjRph//79mDFjBtq3b4/09HQ0a9YMl19+Oa666io8++yzOOaYY7Bjxw7MmDED7dq1Q9++fV36iYmIiIiIyA0Jbh8AERERERFRuClTpqB27dpo1KgR+vTpg1mzZuGll17ChAkTkJiYiPbt2+O5557DqFGj0KZNG4wbNw4jR44s8hgnnHACbr75ZlxyySWoXr06Ro8eDQB49913cdVVV2HIkCFo3rw5+vXrh19//RUNGjRw40clIiIiIiIXhTRN09w+CCIiIiIiIiIiIiIiIicxg4SIiIiIiIiIiIiIiAKHARIiIiIiIiIiIiIiIgocBkiIiIiIiIiIiIiIiChwGCAhIiIiIiIiIiIiIqLAYYCEiIiIiIiIiIiIiIgChwESIiIiIiIiIiIiIiIKHAZIiIiIiIiIiIiIiIgocBggISIiIiIiIiIiIiKiwGGAhIiIiIiIiIiIiIiIAocBEiIiIiIiIiIiIiIiChwGSIiIiIiIiIiIiIiIKHD+D7icwcMjSHgIAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"markdown","source":[" The ARIMA model might not have captured the variation in the data as it showed flat orange line."],"metadata":{"id":"uJ8oOtzMkeFR"}},{"cell_type":"markdown","source":["## SARIMA"],"metadata":{"id":"cdWoErzplPKV"}},{"cell_type":"code","source":["from statsmodels.tsa.statespace.sarimax import SARIMAX\n","from tqdm import tqdm"],"metadata":{"id":"bDr-vUXBlKP_","executionInfo":{"status":"ok","timestamp":1737525128513,"user_tz":-480,"elapsed":7,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["# Grid search parameter\n","best_aic = np.inf\n","best_order = None\n","best_seasonal_order = None\n","best_model = None\n","\n","# Define a range of p, d, q values to try\n","p_values = range(0, 3)\n","d_values = range(0, 2)\n","q_values = range(0, 3)\n","P_values = range(0, 2)\n","D_values = range(0, 2)\n","Q_values = range(0, 2)\n","S = 52  # Assuming weekly seasonality\n","\n","for p in tqdm(p_values):\n","    for d in d_values:\n","        for q in q_values:\n","            for P in P_values:\n","                for D in D_values:\n","                    for Q in Q_values:\n","                        try:\n","                            model = SARIMAX(train, order=(p, d, q), seasonal_order=(P, D, Q, S), enforce_stationarity=False, enforce_invertibility=False)\n","                            model_fit = model.fit(disp=False)\n","                            aic = model_fit.aic\n","                            if aic < best_aic:\n","                                best_aic = aic\n","                                best_order = (p, d, q)\n","                                best_seasonal_order = (P, D, Q, S)\n","                                best_model = model_fit\n","                        except Exception as e:\n","                            continue\n","\n","print(f\"Best SARIMA order: {best_order} with seasonal order: {best_seasonal_order} and AIC: {best_aic}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R0kVD1ewlT_d","executionInfo":{"status":"ok","timestamp":1737525290565,"user_tz":-480,"elapsed":162058,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"aa899f9d-f67c-461b-821f-c859627b9e53"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/3 [00:00<?, ?it/s]/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n"," 33%|███▎      | 1/3 [00:32<01:05, 32.66s/it]/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n"," 67%|██████▋   | 2/3 [01:30<00:47, 47.42s/it]/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n","  warnings.warn(\"Maximum Likelihood optimization failed to \"\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","100%|██████████| 3/3 [02:42<00:00, 54.12s/it]"]},{"output_type":"stream","name":"stdout","text":["Best SARIMA order: (0, 0, 0) with seasonal order: (0, 1, 1, 52) and AIC: 4.0\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["# Walk-forward validation\n","predictions = []\n","for i in range(len(test)):\n","    train_data = weekly_sale.iloc[:-(52-i)]\n","    model = SARIMAX(train_data, order=best_order, seasonal_order=best_seasonal_order, enforce_stationarity=False, enforce_invertibility=False)\n","    model_fit = model.fit(disp=False)\n","    forecast = model_fit.forecast(steps=1)\n","    predictions.append(forecast.values[0])\n","\n","# Evaluate the model\n","mse = mean_squared_error(test, predictions)\n","rmse = np.sqrt(mse)\n","\n","print(f\"RMSE for best SARIMA model: {rmse}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8A8Xspxnlmxk","executionInfo":{"status":"ok","timestamp":1737525391082,"user_tz":-480,"elapsed":100534,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"3bf256d4-b3eb-468b-ed66-a913ae88f349"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/mlemodel.py:1235: RuntimeWarning: invalid value encountered in divide\n","  np.inner(score_obs, score_obs) /\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n"]},{"output_type":"stream","name":"stdout","text":["RMSE for best SARIMA model: 2128341.295087876\n"]}]},{"cell_type":"code","source":["fig, ax = plt.subplots(figsize=(20,10))\n","\n","sns.lineplot(x=train.index, y='Weekly_Sales', data=train, color ='Blue',ax=ax, label='Training')\n","sns.lineplot(x=test.index, y='Weekly_Sales', data=test, color ='Red',ax=ax, label='Testing')\n","sns.lineplot(x=test.index, y=predictions, color ='Orange', ax=ax, label='Prediction')\n","ax.set_title('SARIMA Weekly Sale Forecast')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":626},"id":"AimweWdql_zc","executionInfo":{"status":"ok","timestamp":1737525392178,"user_tz":-480,"elapsed":1099,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"f02e7743-4f30-4caf-89f1-bf6ef967316c"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'SARIMA Weekly Sale Forecast')"]},"metadata":{},"execution_count":50},{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x1000 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Forecast Unseen Data"],"metadata":{"id":"PjiXX_Ap1bFS"}},{"cell_type":"code","source":["df_test['Weekly_Sales'] = np.nan"],"metadata":{"id":"LNs9ltXo2TeW","executionInfo":{"status":"ok","timestamp":1737525392178,"user_tz":-480,"elapsed":6,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["df_testset = df_test.groupby('Date')['Weekly_Sales'].sum().reset_index()\n","\n","df_testset.set_index('Date',inplace =True)"],"metadata":{"id":"A55cdc-J1pKi","executionInfo":{"status":"ok","timestamp":1737525392178,"user_tz":-480,"elapsed":6,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["train = weekly_sale\n","test = df_testset"],"metadata":{"id":"KEZz26l01pKj","executionInfo":{"status":"ok","timestamp":1737525392178,"user_tz":-480,"elapsed":6,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["predictions = []\n","from statsmodels.tsa.statespace.sarimax import SARIMAX\n","import matplotlib.pyplot as plt\n","\n","# Train the SARIMA model on historical data\n","model = SARIMAX(train, order=best_order, seasonal_order=best_seasonal_order, enforce_stationarity=False, enforce_invertibility=False)\n","model_fit = model.fit(disp=False)\n","\n","# Forecast\n","n_periods = len(test)\n","forecast = model_fit.forecast(steps=n_periods)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YfWJvEXp48va","executionInfo":{"status":"ok","timestamp":1737525392906,"user_tz":-480,"elapsed":733,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"42bdcb3f-9231-4532-a120-8e4795bee126"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: No frequency information was provided, so inferred frequency W-FRI will be used.\n","  self._init_dates(dates, freq)\n","/usr/local/lib/python3.11/dist-packages/statsmodels/tsa/statespace/sarimax.py:866: UserWarning: Too few observations to estimate starting parameters for seasonal ARMA. All parameters except for variances will be set to zeros.\n","  warn('Too few observations to estimate starting parameters%s.'\n"]}]},{"cell_type":"code","source":["forecast = forecast.to_frame()\n","forecast.columns = ['predicted_mean']\n","\n","\n","fig, ax = plt.subplots(figsize=(20,10))\n","\n","sns.lineplot(x=train.index, y='Weekly_Sales', data=train, color ='Blue',ax=ax, label='Training')\n","sns.lineplot(x=forecast.index, y='predicted_mean' ,data=forecast, color ='Orange', ax=ax, label='Prediction')\n","ax.set_title('SARIMA Weekly Sale Forecast')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":626},"id":"WghD7OXA9WVc","executionInfo":{"status":"ok","timestamp":1737525393726,"user_tz":-480,"elapsed":821,"user":{"displayName":"Marcus yong","userId":"04221522925713520604"}},"outputId":"ed2a5af3-15dc-4718-d7bf-9d235f2ac7a4"},"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'SARIMA Weekly Sale Forecast')"]},"metadata":{},"execution_count":55},{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x1000 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}